import*as t from"@dcspark/cardano-multiplatform-lib-browser";import*as e from"react";var r={736:(t,e,r)=>{var n;t=r.nmd(t);var o=function(t){var e=1e7,r=7,n=9007199254740992,i=g(n),u="0123456789abcdefghijklmnopqrstuvwxyz",a="function"==typeof BigInt;function s(t,e,r,n){return void 0===t?s[0]:void 0===e||10==+e&&!r?Q(t):H(t,e,r,n)}function f(t,e){this.value=t,this.sign=e,this.isSmall=!1}function c(t){this.value=t,this.sign=t<0,this.isSmall=!0}function l(t){this.value=t}function _(t){return-n<t&&t<n}function g(t){return t<1e7?[t]:t<1e14?[t%1e7,Math.floor(t/1e7)]:[t%1e7,Math.floor(t/1e7)%1e7,Math.floor(t/1e14)]}function p(t){d(t);var r=t.length;if(r<4&&N(t,i)<0)switch(r){case 0:return 0;case 1:return t[0];case 2:return t[0]+t[1]*e;default:return t[0]+(t[1]+t[2]*e)*e}return t}function d(t){for(var e=t.length;0===t[--e];);t.length=e+1}function h(t){for(var e=new Array(t),r=-1;++r<t;)e[r]=0;return e}function m(t){return t>0?Math.floor(t):Math.ceil(t)}function y(t,r){var n,o,i=t.length,u=r.length,a=new Array(i),s=0,f=e;for(o=0;o<u;o++)s=(n=t[o]+r[o]+s)>=f?1:0,a[o]=n-s*f;for(;o<i;)s=(n=t[o]+s)===f?1:0,a[o++]=n-s*f;return s>0&&a.push(s),a}function v(t,e){return t.length>=e.length?y(t,e):y(e,t)}function b(t,r){var n,o,i=t.length,u=new Array(i),a=e;for(o=0;o<i;o++)n=t[o]-a+r,r=Math.floor(n/a),u[o]=n-r*a,r+=1;for(;r>0;)u[o++]=r%a,r=Math.floor(r/a);return u}function w(t,r){var n,o,i=t.length,u=r.length,a=new Array(i),s=0,f=e;for(n=0;n<u;n++)(o=t[n]-s-r[n])<0?(o+=f,s=1):s=0,a[n]=o;for(n=u;n<i;n++){if(!((o=t[n]-s)<0)){a[n++]=o;break}o+=f,a[n]=o}for(;n<i;n++)a[n]=t[n];return d(a),a}function T(t,r,n){var o,i,u=t.length,a=new Array(u),s=-r,l=e;for(o=0;o<u;o++)i=t[o]+s,s=Math.floor(i/l),i%=l,a[o]=i<0?i+l:i;return"number"==typeof(a=p(a))?(n&&(a=-a),new c(a)):new f(a,n)}function S(t,r){var n,o,i,u,a=t.length,s=r.length,f=h(a+s),c=e;for(i=0;i<a;++i){u=t[i];for(var l=0;l<s;++l)n=u*r[l]+f[i+l],o=Math.floor(n/c),f[i+l]=n-o*c,f[i+l+1]+=o}return d(f),f}function x(t,r){var n,o,i=t.length,u=new Array(i),a=e,s=0;for(o=0;o<i;o++)n=t[o]*r+s,s=Math.floor(n/a),u[o]=n-s*a;for(;s>0;)u[o++]=s%a,s=Math.floor(s/a);return u}function L(t,e){for(var r=[];e-- >0;)r.push(0);return r.concat(t)}function J(t,e){var r=Math.max(t.length,e.length);if(r<=30)return S(t,e);r=Math.ceil(r/2);var n=t.slice(r),o=t.slice(0,r),i=e.slice(r),u=e.slice(0,r),a=J(o,u),s=J(n,i),f=J(v(o,n),v(u,i)),c=v(v(a,L(w(w(f,a),s),r)),L(s,2*r));return d(c),c}function E(t,r,n){return new f(t<e?x(r,t):S(r,g(t)),n)}function R(t){var r,n,o,i,u=t.length,a=h(u+u),s=e;for(o=0;o<u;o++){n=0-(i=t[o])*i;for(var f=o;f<u;f++)r=i*t[f]*2+a[o+f]+n,n=Math.floor(r/s),a[o+f]=r-n*s;a[o+u]=n}return d(a),a}function I(t,r){var n,o,i,u,a=t.length,s=h(a),f=e;for(i=0,n=a-1;n>=0;--n)i=(u=i*f+t[n])-(o=m(u/r))*r,s[n]=0|o;return[s,0|i]}function A(t,r){var n,o=Q(r);if(a)return[new l(t.value/o.value),new l(t.value%o.value)];var i,u=t.value,_=o.value;if(0===_)throw new Error("Cannot divide by zero");if(t.isSmall)return o.isSmall?[new c(m(u/_)),new c(u%_)]:[s[0],t];if(o.isSmall){if(1===_)return[t,s[0]];if(-1==_)return[t.negate(),s[0]];var y=Math.abs(_);if(y<e){i=p((n=I(u,y))[0]);var v=n[1];return t.sign&&(v=-v),"number"==typeof i?(t.sign!==o.sign&&(i=-i),[new c(i),new c(v)]):[new f(i,t.sign!==o.sign),new c(v)]}_=g(y)}var b=N(u,_);if(-1===b)return[s[0],t];if(0===b)return[s[t.sign===o.sign?1:-1],s[0]];n=u.length+_.length<=200?function(t,r){var n,o,i,u,a,s,f,c=t.length,l=r.length,_=e,g=h(r.length),d=r[l-1],m=Math.ceil(_/(2*d)),y=x(t,m),v=x(r,m);for(y.length<=c&&y.push(0),v.push(0),d=v[l-1],o=c-l;o>=0;o--){for(n=_-1,y[o+l]!==d&&(n=Math.floor((y[o+l]*_+y[o+l-1])/d)),i=0,u=0,s=v.length,a=0;a<s;a++)i+=n*v[a],f=Math.floor(i/_),u+=y[o+a]-(i-f*_),i=f,u<0?(y[o+a]=u+_,u=-1):(y[o+a]=u,u=0);for(;0!==u;){for(n-=1,i=0,a=0;a<s;a++)(i+=y[o+a]-_+v[a])<0?(y[o+a]=i+_,i=0):(y[o+a]=i,i=1);u+=i}g[o]=n}return y=I(y,m)[0],[p(g),p(y)]}(u,_):function(t,r){for(var n,o,i,u,a,s=t.length,f=r.length,c=[],l=[],_=e;s;)if(l.unshift(t[--s]),d(l),N(l,r)<0)c.push(0);else{i=l[(o=l.length)-1]*_+l[o-2],u=r[f-1]*_+r[f-2],o>f&&(i=(i+1)*_),n=Math.ceil(i/u);do{if(N(a=x(r,n),l)<=0)break;n--}while(n);c.push(n),l=w(l,a)}return c.reverse(),[p(c),p(l)]}(u,_),i=n[0];var T=t.sign!==o.sign,S=n[1],L=t.sign;return"number"==typeof i?(T&&(i=-i),i=new c(i)):i=new f(i,T),"number"==typeof S?(L&&(S=-S),S=new c(S)):S=new f(S,L),[i,S]}function N(t,e){if(t.length!==e.length)return t.length>e.length?1:-1;for(var r=t.length-1;r>=0;r--)if(t[r]!==e[r])return t[r]>e[r]?1:-1;return 0}function O(t){var e=t.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function F(t,e){for(var r,n,i,u=t.prev(),a=u,s=0;a.isEven();)a=a.divide(2),s++;t:for(n=0;n<e.length;n++)if(!t.lesser(e[n])&&!(i=o(e[n]).modPow(a,t)).isUnit()&&!i.equals(u)){for(r=s-1;0!=r;r--){if((i=i.square().mod(t)).isUnit())return!1;if(i.equals(u))continue t}return!1}return!0}f.prototype=Object.create(s.prototype),c.prototype=Object.create(s.prototype),l.prototype=Object.create(s.prototype),f.prototype.add=function(t){var e=Q(t);if(this.sign!==e.sign)return this.subtract(e.negate());var r=this.value,n=e.value;return e.isSmall?new f(b(r,Math.abs(n)),this.sign):new f(v(r,n),this.sign)},f.prototype.plus=f.prototype.add,c.prototype.add=function(t){var e=Q(t),r=this.value;if(r<0!==e.sign)return this.subtract(e.negate());var n=e.value;if(e.isSmall){if(_(r+n))return new c(r+n);n=g(Math.abs(n))}return new f(b(n,Math.abs(r)),r<0)},c.prototype.plus=c.prototype.add,l.prototype.add=function(t){return new l(this.value+Q(t).value)},l.prototype.plus=l.prototype.add,f.prototype.subtract=function(t){var e=Q(t);if(this.sign!==e.sign)return this.add(e.negate());var r=this.value,n=e.value;return e.isSmall?T(r,Math.abs(n),this.sign):function(t,e,r){var n;return N(t,e)>=0?n=w(t,e):(n=w(e,t),r=!r),"number"==typeof(n=p(n))?(r&&(n=-n),new c(n)):new f(n,r)}(r,n,this.sign)},f.prototype.minus=f.prototype.subtract,c.prototype.subtract=function(t){var e=Q(t),r=this.value;if(r<0!==e.sign)return this.add(e.negate());var n=e.value;return e.isSmall?new c(r-n):T(n,Math.abs(r),r>=0)},c.prototype.minus=c.prototype.subtract,l.prototype.subtract=function(t){return new l(this.value-Q(t).value)},l.prototype.minus=l.prototype.subtract,f.prototype.negate=function(){return new f(this.value,!this.sign)},c.prototype.negate=function(){var t=this.sign,e=new c(-this.value);return e.sign=!t,e},l.prototype.negate=function(){return new l(-this.value)},f.prototype.abs=function(){return new f(this.value,!1)},c.prototype.abs=function(){return new c(Math.abs(this.value))},l.prototype.abs=function(){return new l(this.value>=0?this.value:-this.value)},f.prototype.multiply=function(t){var r,n,o,i=Q(t),u=this.value,a=i.value,c=this.sign!==i.sign;if(i.isSmall){if(0===a)return s[0];if(1===a)return this;if(-1===a)return this.negate();if((r=Math.abs(a))<e)return new f(x(u,r),c);a=g(r)}return new f(-.012*(n=u.length)-.012*(o=a.length)+15e-6*n*o>0?J(u,a):S(u,a),c)},f.prototype.times=f.prototype.multiply,c.prototype._multiplyBySmall=function(t){return _(t.value*this.value)?new c(t.value*this.value):E(Math.abs(t.value),g(Math.abs(this.value)),this.sign!==t.sign)},f.prototype._multiplyBySmall=function(t){return 0===t.value?s[0]:1===t.value?this:-1===t.value?this.negate():E(Math.abs(t.value),this.value,this.sign!==t.sign)},c.prototype.multiply=function(t){return Q(t)._multiplyBySmall(this)},c.prototype.times=c.prototype.multiply,l.prototype.multiply=function(t){return new l(this.value*Q(t).value)},l.prototype.times=l.prototype.multiply,f.prototype.square=function(){return new f(R(this.value),!1)},c.prototype.square=function(){var t=this.value*this.value;return _(t)?new c(t):new f(R(g(Math.abs(this.value))),!1)},l.prototype.square=function(t){return new l(this.value*this.value)},f.prototype.divmod=function(t){var e=A(this,t);return{quotient:e[0],remainder:e[1]}},l.prototype.divmod=c.prototype.divmod=f.prototype.divmod,f.prototype.divide=function(t){return A(this,t)[0]},l.prototype.over=l.prototype.divide=function(t){return new l(this.value/Q(t).value)},c.prototype.over=c.prototype.divide=f.prototype.over=f.prototype.divide,f.prototype.mod=function(t){return A(this,t)[1]},l.prototype.mod=l.prototype.remainder=function(t){return new l(this.value%Q(t).value)},c.prototype.remainder=c.prototype.mod=f.prototype.remainder=f.prototype.mod,f.prototype.pow=function(t){var e,r,n,o=Q(t),i=this.value,u=o.value;if(0===u)return s[1];if(0===i)return s[0];if(1===i)return s[1];if(-1===i)return o.isEven()?s[1]:s[-1];if(o.sign)return s[0];if(!o.isSmall)throw new Error("The exponent "+o.toString()+" is too large.");if(this.isSmall&&_(e=Math.pow(i,u)))return new c(m(e));for(r=this,n=s[1];!0&u&&(n=n.times(r),--u),0!==u;)u/=2,r=r.square();return n},c.prototype.pow=f.prototype.pow,l.prototype.pow=function(t){var e=Q(t),r=this.value,n=e.value,o=BigInt(0),i=BigInt(1),u=BigInt(2);if(n===o)return s[1];if(r===o)return s[0];if(r===i)return s[1];if(r===BigInt(-1))return e.isEven()?s[1]:s[-1];if(e.isNegative())return new l(o);for(var a=this,f=s[1];(n&i)===i&&(f=f.times(a),--n),n!==o;)n/=u,a=a.square();return f},f.prototype.modPow=function(t,e){if(t=Q(t),(e=Q(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var r=s[1],n=this.mod(e);for(t.isNegative()&&(t=t.multiply(s[-1]),n=n.modInv(e));t.isPositive();){if(n.isZero())return s[0];t.isOdd()&&(r=r.multiply(n).mod(e)),t=t.divide(2),n=n.square().mod(e)}return r},l.prototype.modPow=c.prototype.modPow=f.prototype.modPow,f.prototype.compareAbs=function(t){var e=Q(t),r=this.value,n=e.value;return e.isSmall?1:N(r,n)},c.prototype.compareAbs=function(t){var e=Q(t),r=Math.abs(this.value),n=e.value;return e.isSmall?r===(n=Math.abs(n))?0:r>n?1:-1:-1},l.prototype.compareAbs=function(t){var e=this.value,r=Q(t).value;return(e=e>=0?e:-e)===(r=r>=0?r:-r)?0:e>r?1:-1},f.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=Q(t),r=this.value,n=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:N(r,n)*(this.sign?-1:1)},f.prototype.compareTo=f.prototype.compare,c.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=Q(t),r=this.value,n=e.value;return e.isSmall?r==n?0:r>n?1:-1:r<0!==e.sign?r<0?-1:1:r<0?1:-1},c.prototype.compareTo=c.prototype.compare,l.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=this.value,r=Q(t).value;return e===r?0:e>r?1:-1},l.prototype.compareTo=l.prototype.compare,f.prototype.equals=function(t){return 0===this.compare(t)},l.prototype.eq=l.prototype.equals=c.prototype.eq=c.prototype.equals=f.prototype.eq=f.prototype.equals,f.prototype.notEquals=function(t){return 0!==this.compare(t)},l.prototype.neq=l.prototype.notEquals=c.prototype.neq=c.prototype.notEquals=f.prototype.neq=f.prototype.notEquals,f.prototype.greater=function(t){return this.compare(t)>0},l.prototype.gt=l.prototype.greater=c.prototype.gt=c.prototype.greater=f.prototype.gt=f.prototype.greater,f.prototype.lesser=function(t){return this.compare(t)<0},l.prototype.lt=l.prototype.lesser=c.prototype.lt=c.prototype.lesser=f.prototype.lt=f.prototype.lesser,f.prototype.greaterOrEquals=function(t){return this.compare(t)>=0},l.prototype.geq=l.prototype.greaterOrEquals=c.prototype.geq=c.prototype.greaterOrEquals=f.prototype.geq=f.prototype.greaterOrEquals,f.prototype.lesserOrEquals=function(t){return this.compare(t)<=0},l.prototype.leq=l.prototype.lesserOrEquals=c.prototype.leq=c.prototype.lesserOrEquals=f.prototype.leq=f.prototype.lesserOrEquals,f.prototype.isEven=function(){return 0==(1&this.value[0])},c.prototype.isEven=function(){return 0==(1&this.value)},l.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},f.prototype.isOdd=function(){return 1==(1&this.value[0])},c.prototype.isOdd=function(){return 1==(1&this.value)},l.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},f.prototype.isPositive=function(){return!this.sign},c.prototype.isPositive=function(){return this.value>0},l.prototype.isPositive=c.prototype.isPositive,f.prototype.isNegative=function(){return this.sign},c.prototype.isNegative=function(){return this.value<0},l.prototype.isNegative=c.prototype.isNegative,f.prototype.isUnit=function(){return!1},c.prototype.isUnit=function(){return 1===Math.abs(this.value)},l.prototype.isUnit=function(){return this.abs().value===BigInt(1)},f.prototype.isZero=function(){return!1},c.prototype.isZero=function(){return 0===this.value},l.prototype.isZero=function(){return this.value===BigInt(0)},f.prototype.isDivisibleBy=function(t){var e=Q(t);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},l.prototype.isDivisibleBy=c.prototype.isDivisibleBy=f.prototype.isDivisibleBy,f.prototype.isPrime=function(e){var r=O(this);if(r!==t)return r;var n=this.abs(),i=n.bitLength();if(i<=64)return F(n,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var u=Math.log(2)*i.toJSNumber(),a=Math.ceil(!0===e?2*Math.pow(u,2):u),s=[],f=0;f<a;f++)s.push(o(f+2));return F(n,s)},l.prototype.isPrime=c.prototype.isPrime=f.prototype.isPrime,f.prototype.isProbablePrime=function(e,r){var n=O(this);if(n!==t)return n;for(var i=this.abs(),u=e===t?5:e,a=[],s=0;s<u;s++)a.push(o.randBetween(2,i.minus(2),r));return F(i,a)},l.prototype.isProbablePrime=c.prototype.isProbablePrime=f.prototype.isProbablePrime,f.prototype.modInv=function(t){for(var e,r,n,i=o.zero,u=o.one,a=Q(t),s=this.abs();!s.isZero();)e=a.divide(s),r=i,n=a,i=u,a=s,u=r.subtract(e.multiply(u)),s=n.subtract(e.multiply(s));if(!a.isUnit())throw new Error(this.toString()+" and "+t.toString()+" are not co-prime");return-1===i.compare(0)&&(i=i.add(t)),this.isNegative()?i.negate():i},l.prototype.modInv=c.prototype.modInv=f.prototype.modInv,f.prototype.next=function(){var t=this.value;return this.sign?T(t,1,this.sign):new f(b(t,1),this.sign)},c.prototype.next=function(){var t=this.value;return t+1<n?new c(t+1):new f(i,!1)},l.prototype.next=function(){return new l(this.value+BigInt(1))},f.prototype.prev=function(){var t=this.value;return this.sign?new f(b(t,1),!0):T(t,1,this.sign)},c.prototype.prev=function(){var t=this.value;return t-1>-n?new c(t-1):new f(i,!0)},l.prototype.prev=function(){return new l(this.value-BigInt(1))};for(var k=[1];2*k[k.length-1]<=e;)k.push(2*k[k.length-1]);var C=k.length,M=k[C-1];function P(t){return Math.abs(t)<=e}function U(t,e,r){e=Q(e);for(var n=t.isNegative(),i=e.isNegative(),u=n?t.not():t,a=i?e.not():e,s=0,f=0,c=null,l=null,_=[];!u.isZero()||!a.isZero();)s=(c=A(u,M))[1].toJSNumber(),n&&(s=M-1-s),f=(l=A(a,M))[1].toJSNumber(),i&&(f=M-1-f),u=c[0],a=l[0],_.push(r(s,f));for(var g=0!==r(n?1:0,i?1:0)?o(-1):o(0),p=_.length-1;p>=0;p-=1)g=g.multiply(M).add(o(_[p]));return g}f.prototype.shiftLeft=function(t){var e=Q(t).toJSNumber();if(!P(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var r=this;if(r.isZero())return r;for(;e>=C;)r=r.multiply(M),e-=C-1;return r.multiply(k[e])},l.prototype.shiftLeft=c.prototype.shiftLeft=f.prototype.shiftLeft,f.prototype.shiftRight=function(t){var e,r=Q(t).toJSNumber();if(!P(r))throw new Error(String(r)+" is too large for shifting.");if(r<0)return this.shiftLeft(-r);for(var n=this;r>=C;){if(n.isZero()||n.isNegative()&&n.isUnit())return n;n=(e=A(n,M))[1].isNegative()?e[0].prev():e[0],r-=C-1}return(e=A(n,k[r]))[1].isNegative()?e[0].prev():e[0]},l.prototype.shiftRight=c.prototype.shiftRight=f.prototype.shiftRight,f.prototype.not=function(){return this.negate().prev()},l.prototype.not=c.prototype.not=f.prototype.not,f.prototype.and=function(t){return U(this,t,(function(t,e){return t&e}))},l.prototype.and=c.prototype.and=f.prototype.and,f.prototype.or=function(t){return U(this,t,(function(t,e){return t|e}))},l.prototype.or=c.prototype.or=f.prototype.or,f.prototype.xor=function(t){return U(this,t,(function(t,e){return t^e}))},l.prototype.xor=c.prototype.xor=f.prototype.xor;var B=1<<30,j=(e&-e)*(e&-e)|B;function W(t){var r=t.value,n="number"==typeof r?r|B:"bigint"==typeof r?r|BigInt(B):r[0]+r[1]*e|j;return n&-n}function q(t,e){if(e.compareTo(t)<=0){var r=q(t,e.square(e)),n=r.p,i=r.e,u=n.multiply(e);return u.compareTo(t)<=0?{p:u,e:2*i+1}:{p:n,e:2*i}}return{p:o(1),e:0}}function D(t,e){return t=Q(t),e=Q(e),t.greater(e)?t:e}function z(t,e){return t=Q(t),e=Q(e),t.lesser(e)?t:e}function G(t,e){if(t=Q(t).abs(),e=Q(e).abs(),t.equals(e))return t;if(t.isZero())return e;if(e.isZero())return t;for(var r,n,o=s[1];t.isEven()&&e.isEven();)r=z(W(t),W(e)),t=t.divide(r),e=e.divide(r),o=o.multiply(r);for(;t.isEven();)t=t.divide(W(t));do{for(;e.isEven();)e=e.divide(W(e));t.greater(e)&&(n=e,e=t,t=n),e=e.subtract(t)}while(!e.isZero());return o.isUnit()?t:t.multiply(o)}f.prototype.bitLength=function(){var t=this;return t.compareTo(o(0))<0&&(t=t.negate().subtract(o(1))),0===t.compareTo(o(0))?o(0):o(q(t,o(2)).e).add(o(1))},l.prototype.bitLength=c.prototype.bitLength=f.prototype.bitLength;var H=function(t,e,r,n){r=r||u,t=String(t),n||(t=t.toLowerCase(),r=r.toLowerCase());var o,i=t.length,a=Math.abs(e),s={};for(o=0;o<r.length;o++)s[r[o]]=o;for(o=0;o<i;o++)if("-"!==(l=t[o])&&l in s&&s[l]>=a){if("1"===l&&1===a)continue;throw new Error(l+" is not a valid digit in base "+e+".")}e=Q(e);var f=[],c="-"===t[0];for(o=c?1:0;o<t.length;o++){var l;if((l=t[o])in s)f.push(Q(s[l]));else{if("<"!==l)throw new Error(l+" is not a valid character");var _=o;do{o++}while(">"!==t[o]&&o<t.length);f.push(Q(t.slice(_+1,o)))}}return $(f,e,c)};function $(t,e,r){var n,o=s[0],i=s[1];for(n=t.length-1;n>=0;n--)o=o.add(t[n].times(i)),i=i.times(e);return r?o.negate():o}function V(t,e){if((e=o(e)).isZero()){if(t.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(e.equals(-1)){if(t.isZero())return{value:[0],isNegative:!1};if(t.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-t.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var r=Array.apply(null,Array(t.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return r.unshift([1]),{value:[].concat.apply([],r),isNegative:!1}}var n=!1;if(t.isNegative()&&e.isPositive()&&(n=!0,t=t.abs()),e.isUnit())return t.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(t.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:n};for(var i,u=[],a=t;a.isNegative()||a.compareAbs(e)>=0;){i=a.divmod(e),a=i.quotient;var s=i.remainder;s.isNegative()&&(s=e.minus(s).abs(),a=a.next()),u.push(s.toJSNumber())}return u.push(a.toJSNumber()),{value:u.reverse(),isNegative:n}}function Z(t,e,r){var n=V(t,e);return(n.isNegative?"-":"")+n.value.map((function(t){return function(t,e){return t<(e=e||u).length?e[t]:"<"+t+">"}(t,r)})).join("")}function K(t){if(_(+t)){var e=+t;if(e===m(e))return a?new l(BigInt(e)):new c(e);throw new Error("Invalid integer: "+t)}var n="-"===t[0];n&&(t=t.slice(1));var o=t.split(/e/i);if(o.length>2)throw new Error("Invalid integer: "+o.join("e"));if(2===o.length){var i=o[1];if("+"===i[0]&&(i=i.slice(1)),(i=+i)!==m(i)||!_(i))throw new Error("Invalid integer: "+i+" is not a valid exponent.");var u=o[0],s=u.indexOf(".");if(s>=0&&(i-=u.length-s-1,u=u.slice(0,s)+u.slice(s+1)),i<0)throw new Error("Cannot include negative exponent part for integers");t=u+=new Array(i+1).join("0")}if(!/^([0-9][0-9]*)$/.test(t))throw new Error("Invalid integer: "+t);if(a)return new l(BigInt(n?"-"+t:t));for(var g=[],p=t.length,h=r,y=p-h;p>0;)g.push(+t.slice(y,p)),(y-=h)<0&&(y=0),p-=h;return d(g),new f(g,n)}function Q(t){return"number"==typeof t?function(t){if(a)return new l(BigInt(t));if(_(t)){if(t!==m(t))throw new Error(t+" is not an integer.");return new c(t)}return K(t.toString())}(t):"string"==typeof t?K(t):"bigint"==typeof t?new l(t):t}f.prototype.toArray=function(t){return V(this,t)},c.prototype.toArray=function(t){return V(this,t)},l.prototype.toArray=function(t){return V(this,t)},f.prototype.toString=function(e,r){if(e===t&&(e=10),10!==e)return Z(this,e,r);for(var n,o=this.value,i=o.length,u=String(o[--i]);--i>=0;)n=String(o[i]),u+="0000000".slice(n.length)+n;return(this.sign?"-":"")+u},c.prototype.toString=function(e,r){return e===t&&(e=10),10!=e?Z(this,e,r):String(this.value)},l.prototype.toString=c.prototype.toString,l.prototype.toJSON=f.prototype.toJSON=c.prototype.toJSON=function(){return this.toString()},f.prototype.valueOf=function(){return parseInt(this.toString(),10)},f.prototype.toJSNumber=f.prototype.valueOf,c.prototype.valueOf=function(){return this.value},c.prototype.toJSNumber=c.prototype.valueOf,l.prototype.valueOf=l.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var Y=0;Y<1e3;Y++)s[Y]=Q(Y),Y>0&&(s[-Y]=Q(-Y));return s.one=s[1],s.zero=s[0],s.minusOne=s[-1],s.max=D,s.min=z,s.gcd=G,s.lcm=function(t,e){return t=Q(t).abs(),e=Q(e).abs(),t.divide(G(t,e)).multiply(e)},s.isInstance=function(t){return t instanceof f||t instanceof c||t instanceof l},s.randBetween=function(t,r,n){t=Q(t),r=Q(r);var o=n||Math.random,i=z(t,r),u=D(t,r).subtract(i).add(1);if(u.isSmall)return i.add(Math.floor(o()*u));for(var a=V(u,e).value,f=[],c=!0,l=0;l<a.length;l++){var _=c?a[l]+(l+1<a.length?a[l+1]/e:0):e,g=m(o()*_);f.push(g),g<a[l]&&(c=!1)}return i.add(s.fromArray(f,e,!1))},s.fromArray=function(t,e,r){return $(t.map(Q),Q(e||10),r)},s}();t.hasOwnProperty("exports")&&(t.exports=o),void 0===(n=function(){return o}.call(e,r,e,t))||(t.exports=n)},431:function(t,e,r){var n;!function(o){var i,u=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,a=Math.ceil,s=Math.floor,f="[BigNumber Error] ",c=f+"Number primitive has more than 15 significant digits: ",l=1e14,_=14,g=9007199254740991,p=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],d=1e7,h=1e9;function m(t){var e=0|t;return t>0||t===e?e:e-1}function y(t){for(var e,r,n=1,o=t.length,i=t[0]+"";n<o;){for(e=t[n++]+"",r=_-e.length;r--;e="0"+e);i+=e}for(o=i.length;48===i.charCodeAt(--o););return i.slice(0,o+1||1)}function v(t,e){var r,n,o=t.c,i=e.c,u=t.s,a=e.s,s=t.e,f=e.e;if(!u||!a)return null;if(r=o&&!o[0],n=i&&!i[0],r||n)return r?n?0:-a:u;if(u!=a)return u;if(r=u<0,n=s==f,!o||!i)return n?0:!o^r?1:-1;if(!n)return s>f^r?1:-1;for(a=(s=o.length)<(f=i.length)?s:f,u=0;u<a;u++)if(o[u]!=i[u])return o[u]>i[u]^r?1:-1;return s==f?0:s>f^r?1:-1}function b(t,e,r,n){if(t<e||t>r||t!==s(t))throw Error(f+(n||"Argument")+("number"==typeof t?t<e||t>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function w(t){var e=t.c.length-1;return m(t.e/_)==e&&t.c[e]%2!=0}function T(t,e){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(e<0?"e":"e+")+e}function S(t,e,r){var n,o;if(e<0){for(o=r+".";++e;o+=r);t=o+t}else if(++e>(n=t.length)){for(o=r,e-=n;--e;o+=r);t+=o}else e<n&&(t=t.slice(0,e)+"."+t.slice(e));return t}i=function t(e){var r,n,o,i,x,L,J,E,R,I,A=z.prototype={constructor:z,toString:null,valueOf:null},N=new z(1),O=20,F=4,k=-7,C=21,M=-1e7,P=1e7,U=!1,B=1,j=0,W={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},q="0123456789abcdefghijklmnopqrstuvwxyz",D=!0;function z(t,e){var r,i,a,f,l,p,d,h,m=this;if(!(m instanceof z))return new z(t,e);if(null==e){if(t&&!0===t._isBigNumber)return m.s=t.s,void(!t.c||t.e>P?m.c=m.e=null:t.e<M?m.c=[m.e=0]:(m.e=t.e,m.c=t.c.slice()));if((p="number"==typeof t)&&0*t==0){if(m.s=1/t<0?(t=-t,-1):1,t===~~t){for(f=0,l=t;l>=10;l/=10,f++);return void(f>P?m.c=m.e=null:(m.e=f,m.c=[t]))}h=String(t)}else{if(!u.test(h=String(t)))return o(m,h,p);m.s=45==h.charCodeAt(0)?(h=h.slice(1),-1):1}(f=h.indexOf("."))>-1&&(h=h.replace(".","")),(l=h.search(/e/i))>0?(f<0&&(f=l),f+=+h.slice(l+1),h=h.substring(0,l)):f<0&&(f=h.length)}else{if(b(e,2,q.length,"Base"),10==e&&D)return V(m=new z(t),O+m.e+1,F);if(h=String(t),p="number"==typeof t){if(0*t!=0)return o(m,h,p,e);if(m.s=1/t<0?(h=h.slice(1),-1):1,z.DEBUG&&h.replace(/^0\.0*|\./,"").length>15)throw Error(c+t)}else m.s=45===h.charCodeAt(0)?(h=h.slice(1),-1):1;for(r=q.slice(0,e),f=l=0,d=h.length;l<d;l++)if(r.indexOf(i=h.charAt(l))<0){if("."==i){if(l>f){f=d;continue}}else if(!a&&(h==h.toUpperCase()&&(h=h.toLowerCase())||h==h.toLowerCase()&&(h=h.toUpperCase()))){a=!0,l=-1,f=0;continue}return o(m,String(t),p,e)}p=!1,(f=(h=n(h,e,10,m.s)).indexOf("."))>-1?h=h.replace(".",""):f=h.length}for(l=0;48===h.charCodeAt(l);l++);for(d=h.length;48===h.charCodeAt(--d););if(h=h.slice(l,++d)){if(d-=l,p&&z.DEBUG&&d>15&&(t>g||t!==s(t)))throw Error(c+m.s*t);if((f=f-l-1)>P)m.c=m.e=null;else if(f<M)m.c=[m.e=0];else{if(m.e=f,m.c=[],l=(f+1)%_,f<0&&(l+=_),l<d){for(l&&m.c.push(+h.slice(0,l)),d-=_;l<d;)m.c.push(+h.slice(l,l+=_));l=_-(h=h.slice(l)).length}else l-=d;for(;l--;h+="0");m.c.push(+h)}}else m.c=[m.e=0]}function G(t,e,r,n){var o,i,u,a,s;if(null==r?r=F:b(r,0,8),!t.c)return t.toString();if(o=t.c[0],u=t.e,null==e)s=y(t.c),s=1==n||2==n&&(u<=k||u>=C)?T(s,u):S(s,u,"0");else if(i=(t=V(new z(t),e,r)).e,a=(s=y(t.c)).length,1==n||2==n&&(e<=i||i<=k)){for(;a<e;s+="0",a++);s=T(s,i)}else if(e-=u,s=S(s,i,"0"),i+1>a){if(--e>0)for(s+=".";e--;s+="0");}else if((e+=i-a)>0)for(i+1==a&&(s+=".");e--;s+="0");return t.s<0&&o?"-"+s:s}function H(t,e){for(var r,n=1,o=new z(t[0]);n<t.length;n++){if(!(r=new z(t[n])).s){o=r;break}e.call(o,r)&&(o=r)}return o}function $(t,e,r){for(var n=1,o=e.length;!e[--o];e.pop());for(o=e[0];o>=10;o/=10,n++);return(r=n+r*_-1)>P?t.c=t.e=null:r<M?t.c=[t.e=0]:(t.e=r,t.c=e),t}function V(t,e,r,n){var o,i,u,f,c,g,d,h=t.c,m=p;if(h){t:{for(o=1,f=h[0];f>=10;f/=10,o++);if((i=e-o)<0)i+=_,u=e,d=(c=h[g=0])/m[o-u-1]%10|0;else if((g=a((i+1)/_))>=h.length){if(!n)break t;for(;h.length<=g;h.push(0));c=d=0,o=1,u=(i%=_)-_+1}else{for(c=f=h[g],o=1;f>=10;f/=10,o++);d=(u=(i%=_)-_+o)<0?0:c/m[o-u-1]%10|0}if(n=n||e<0||null!=h[g+1]||(u<0?c:c%m[o-u-1]),n=r<4?(d||n)&&(0==r||r==(t.s<0?3:2)):d>5||5==d&&(4==r||n||6==r&&(i>0?u>0?c/m[o-u]:0:h[g-1])%10&1||r==(t.s<0?8:7)),e<1||!h[0])return h.length=0,n?(e-=t.e+1,h[0]=m[(_-e%_)%_],t.e=-e||0):h[0]=t.e=0,t;if(0==i?(h.length=g,f=1,g--):(h.length=g+1,f=m[_-i],h[g]=u>0?s(c/m[o-u]%m[u])*f:0),n)for(;;){if(0==g){for(i=1,u=h[0];u>=10;u/=10,i++);for(u=h[0]+=f,f=1;u>=10;u/=10,f++);i!=f&&(t.e++,h[0]==l&&(h[0]=1));break}if(h[g]+=f,h[g]!=l)break;h[g--]=0,f=1}for(i=h.length;0===h[--i];h.pop());}t.e>P?t.c=t.e=null:t.e<M&&(t.c=[t.e=0])}return t}function Z(t){var e,r=t.e;return null===r?t.toString():(e=y(t.c),e=r<=k||r>=C?T(e,r):S(e,r,"0"),t.s<0?"-"+e:e)}return z.clone=t,z.ROUND_UP=0,z.ROUND_DOWN=1,z.ROUND_CEIL=2,z.ROUND_FLOOR=3,z.ROUND_HALF_UP=4,z.ROUND_HALF_DOWN=5,z.ROUND_HALF_EVEN=6,z.ROUND_HALF_CEIL=7,z.ROUND_HALF_FLOOR=8,z.EUCLID=9,z.config=z.set=function(t){var e,r;if(null!=t){if("object"!=typeof t)throw Error(f+"Object expected: "+t);if(t.hasOwnProperty(e="DECIMAL_PLACES")&&(b(r=t[e],0,h,e),O=r),t.hasOwnProperty(e="ROUNDING_MODE")&&(b(r=t[e],0,8,e),F=r),t.hasOwnProperty(e="EXPONENTIAL_AT")&&((r=t[e])&&r.pop?(b(r[0],-h,0,e),b(r[1],0,h,e),k=r[0],C=r[1]):(b(r,-h,h,e),k=-(C=r<0?-r:r))),t.hasOwnProperty(e="RANGE"))if((r=t[e])&&r.pop)b(r[0],-h,-1,e),b(r[1],1,h,e),M=r[0],P=r[1];else{if(b(r,-h,h,e),!r)throw Error(f+e+" cannot be zero: "+r);M=-(P=r<0?-r:r)}if(t.hasOwnProperty(e="CRYPTO")){if((r=t[e])!==!!r)throw Error(f+e+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw U=!r,Error(f+"crypto unavailable");U=r}else U=r}if(t.hasOwnProperty(e="MODULO_MODE")&&(b(r=t[e],0,9,e),B=r),t.hasOwnProperty(e="POW_PRECISION")&&(b(r=t[e],0,h,e),j=r),t.hasOwnProperty(e="FORMAT")){if("object"!=typeof(r=t[e]))throw Error(f+e+" not an object: "+r);W=r}if(t.hasOwnProperty(e="ALPHABET")){if("string"!=typeof(r=t[e])||/^.?$|[+\-.\s]|(.).*\1/.test(r))throw Error(f+e+" invalid: "+r);D="0123456789"==r.slice(0,10),q=r}}return{DECIMAL_PLACES:O,ROUNDING_MODE:F,EXPONENTIAL_AT:[k,C],RANGE:[M,P],CRYPTO:U,MODULO_MODE:B,POW_PRECISION:j,FORMAT:W,ALPHABET:q}},z.isBigNumber=function(t){if(!t||!0!==t._isBigNumber)return!1;if(!z.DEBUG)return!0;var e,r,n=t.c,o=t.e,i=t.s;t:if("[object Array]"=={}.toString.call(n)){if((1===i||-1===i)&&o>=-h&&o<=h&&o===s(o)){if(0===n[0]){if(0===o&&1===n.length)return!0;break t}if((e=(o+1)%_)<1&&(e+=_),String(n[0]).length==e){for(e=0;e<n.length;e++)if((r=n[e])<0||r>=l||r!==s(r))break t;if(0!==r)return!0}}}else if(null===n&&null===o&&(null===i||1===i||-1===i))return!0;throw Error(f+"Invalid BigNumber: "+t)},z.maximum=z.max=function(){return H(arguments,A.lt)},z.minimum=z.min=function(){return H(arguments,A.gt)},z.random=(i=9007199254740992,x=Math.random()*i&2097151?function(){return s(Math.random()*i)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(t){var e,r,n,o,i,u=0,c=[],l=new z(N);if(null==t?t=O:b(t,0,h),o=a(t/_),U)if(crypto.getRandomValues){for(e=crypto.getRandomValues(new Uint32Array(o*=2));u<o;)(i=131072*e[u]+(e[u+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),e[u]=r[0],e[u+1]=r[1]):(c.push(i%1e14),u+=2);u=o/2}else{if(!crypto.randomBytes)throw U=!1,Error(f+"crypto unavailable");for(e=crypto.randomBytes(o*=7);u<o;)(i=281474976710656*(31&e[u])+1099511627776*e[u+1]+4294967296*e[u+2]+16777216*e[u+3]+(e[u+4]<<16)+(e[u+5]<<8)+e[u+6])>=9e15?crypto.randomBytes(7).copy(e,u):(c.push(i%1e14),u+=7);u=o/7}if(!U)for(;u<o;)(i=x())<9e15&&(c[u++]=i%1e14);for(o=c[--u],t%=_,o&&t&&(i=p[_-t],c[u]=s(o/i)*i);0===c[u];c.pop(),u--);if(u<0)c=[n=0];else{for(n=-1;0===c[0];c.splice(0,1),n-=_);for(u=1,i=c[0];i>=10;i/=10,u++);u<_&&(n-=_-u)}return l.e=n,l.c=c,l}),z.sum=function(){for(var t=1,e=arguments,r=new z(e[0]);t<e.length;)r=r.plus(e[t++]);return r},n=function(){var t="0123456789";function e(t,e,r,n){for(var o,i,u=[0],a=0,s=t.length;a<s;){for(i=u.length;i--;u[i]*=e);for(u[0]+=n.indexOf(t.charAt(a++)),o=0;o<u.length;o++)u[o]>r-1&&(null==u[o+1]&&(u[o+1]=0),u[o+1]+=u[o]/r|0,u[o]%=r)}return u.reverse()}return function(n,o,i,u,a){var s,f,c,l,_,g,p,d,h=n.indexOf("."),m=O,v=F;for(h>=0&&(l=j,j=0,n=n.replace(".",""),g=(d=new z(o)).pow(n.length-h),j=l,d.c=e(S(y(g.c),g.e,"0"),10,i,t),d.e=d.c.length),c=l=(p=e(n,o,i,a?(s=q,t):(s=t,q))).length;0==p[--l];p.pop());if(!p[0])return s.charAt(0);if(h<0?--c:(g.c=p,g.e=c,g.s=u,p=(g=r(g,d,m,v,i)).c,_=g.r,c=g.e),h=p[f=c+m+1],l=i/2,_=_||f<0||null!=p[f+1],_=v<4?(null!=h||_)&&(0==v||v==(g.s<0?3:2)):h>l||h==l&&(4==v||_||6==v&&1&p[f-1]||v==(g.s<0?8:7)),f<1||!p[0])n=_?S(s.charAt(1),-m,s.charAt(0)):s.charAt(0);else{if(p.length=f,_)for(--i;++p[--f]>i;)p[f]=0,f||(++c,p=[1].concat(p));for(l=p.length;!p[--l];);for(h=0,n="";h<=l;n+=s.charAt(p[h++]));n=S(n,c,s.charAt(0))}return n}}(),r=function(){function t(t,e,r){var n,o,i,u,a=0,s=t.length,f=e%d,c=e/d|0;for(t=t.slice();s--;)a=((o=f*(i=t[s]%d)+(n=c*i+(u=t[s]/d|0)*f)%d*d+a)/r|0)+(n/d|0)+c*u,t[s]=o%r;return a&&(t=[a].concat(t)),t}function e(t,e,r,n){var o,i;if(r!=n)i=r>n?1:-1;else for(o=i=0;o<r;o++)if(t[o]!=e[o]){i=t[o]>e[o]?1:-1;break}return i}function r(t,e,r,n){for(var o=0;r--;)t[r]-=o,o=t[r]<e[r]?1:0,t[r]=o*n+t[r]-e[r];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(n,o,i,u,a){var f,c,g,p,d,h,y,v,b,w,T,S,x,L,J,E,R,I=n.s==o.s?1:-1,A=n.c,N=o.c;if(!(A&&A[0]&&N&&N[0]))return new z(n.s&&o.s&&(A?!N||A[0]!=N[0]:N)?A&&0==A[0]||!N?0*I:I/0:NaN);for(b=(v=new z(I)).c=[],I=i+(c=n.e-o.e)+1,a||(a=l,c=m(n.e/_)-m(o.e/_),I=I/_|0),g=0;N[g]==(A[g]||0);g++);if(N[g]>(A[g]||0)&&c--,I<0)b.push(1),p=!0;else{for(L=A.length,E=N.length,g=0,I+=2,(d=s(a/(N[0]+1)))>1&&(N=t(N,d,a),A=t(A,d,a),E=N.length,L=A.length),x=E,T=(w=A.slice(0,E)).length;T<E;w[T++]=0);R=N.slice(),R=[0].concat(R),J=N[0],N[1]>=a/2&&J++;do{if(d=0,(f=e(N,w,E,T))<0){if(S=w[0],E!=T&&(S=S*a+(w[1]||0)),(d=s(S/J))>1)for(d>=a&&(d=a-1),y=(h=t(N,d,a)).length,T=w.length;1==e(h,w,y,T);)d--,r(h,E<y?R:N,y,a),y=h.length,f=1;else 0==d&&(f=d=1),y=(h=N.slice()).length;if(y<T&&(h=[0].concat(h)),r(w,h,T,a),T=w.length,-1==f)for(;e(N,w,E,T)<1;)d++,r(w,E<T?R:N,T,a),T=w.length}else 0===f&&(d++,w=[0]);b[g++]=d,w[0]?w[T++]=A[x]||0:(w=[A[x]],T=1)}while((x++<L||null!=w[0])&&I--);p=null!=w[0],b[0]||b.splice(0,1)}if(a==l){for(g=1,I=b[0];I>=10;I/=10,g++);V(v,i+(v.e=g+c*_-1)+1,u,p)}else v.e=c,v.r=+p;return v}}(),L=/^(-?)0([xbo])(?=\w[\w.]*$)/i,J=/^([^.]+)\.$/,E=/^\.([^.]+)$/,R=/^-?(Infinity|NaN)$/,I=/^\s*\+(?=[\w.])|^\s+|\s+$/g,o=function(t,e,r,n){var o,i=r?e:e.replace(I,"");if(R.test(i))t.s=isNaN(i)?null:i<0?-1:1;else{if(!r&&(i=i.replace(L,(function(t,e,r){return o="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=o?t:e})),n&&(o=n,i=i.replace(J,"$1").replace(E,"0.$1")),e!=i))return new z(i,o);if(z.DEBUG)throw Error(f+"Not a"+(n?" base "+n:"")+" number: "+e);t.s=null}t.c=t.e=null},A.absoluteValue=A.abs=function(){var t=new z(this);return t.s<0&&(t.s=1),t},A.comparedTo=function(t,e){return v(this,new z(t,e))},A.decimalPlaces=A.dp=function(t,e){var r,n,o,i=this;if(null!=t)return b(t,0,h),null==e?e=F:b(e,0,8),V(new z(i),t+i.e+1,e);if(!(r=i.c))return null;if(n=((o=r.length-1)-m(this.e/_))*_,o=r[o])for(;o%10==0;o/=10,n--);return n<0&&(n=0),n},A.dividedBy=A.div=function(t,e){return r(this,new z(t,e),O,F)},A.dividedToIntegerBy=A.idiv=function(t,e){return r(this,new z(t,e),0,1)},A.exponentiatedBy=A.pow=function(t,e){var r,n,o,i,u,c,l,g,p=this;if((t=new z(t)).c&&!t.isInteger())throw Error(f+"Exponent not an integer: "+Z(t));if(null!=e&&(e=new z(e)),u=t.e>14,!p.c||!p.c[0]||1==p.c[0]&&!p.e&&1==p.c.length||!t.c||!t.c[0])return g=new z(Math.pow(+Z(p),u?t.s*(2-w(t)):+Z(t))),e?g.mod(e):g;if(c=t.s<0,e){if(e.c?!e.c[0]:!e.s)return new z(NaN);(n=!c&&p.isInteger()&&e.isInteger())&&(p=p.mod(e))}else{if(t.e>9&&(p.e>0||p.e<-1||(0==p.e?p.c[0]>1||u&&p.c[1]>=24e7:p.c[0]<8e13||u&&p.c[0]<=9999975e7)))return i=p.s<0&&w(t)?-0:0,p.e>-1&&(i=1/i),new z(c?1/i:i);j&&(i=a(j/_+2))}for(u?(r=new z(.5),c&&(t.s=1),l=w(t)):l=(o=Math.abs(+Z(t)))%2,g=new z(N);;){if(l){if(!(g=g.times(p)).c)break;i?g.c.length>i&&(g.c.length=i):n&&(g=g.mod(e))}if(o){if(0===(o=s(o/2)))break;l=o%2}else if(V(t=t.times(r),t.e+1,1),t.e>14)l=w(t);else{if(0==(o=+Z(t)))break;l=o%2}p=p.times(p),i?p.c&&p.c.length>i&&(p.c.length=i):n&&(p=p.mod(e))}return n?g:(c&&(g=N.div(g)),e?g.mod(e):i?V(g,j,F,void 0):g)},A.integerValue=function(t){var e=new z(this);return null==t?t=F:b(t,0,8),V(e,e.e+1,t)},A.isEqualTo=A.eq=function(t,e){return 0===v(this,new z(t,e))},A.isFinite=function(){return!!this.c},A.isGreaterThan=A.gt=function(t,e){return v(this,new z(t,e))>0},A.isGreaterThanOrEqualTo=A.gte=function(t,e){return 1===(e=v(this,new z(t,e)))||0===e},A.isInteger=function(){return!!this.c&&m(this.e/_)>this.c.length-2},A.isLessThan=A.lt=function(t,e){return v(this,new z(t,e))<0},A.isLessThanOrEqualTo=A.lte=function(t,e){return-1===(e=v(this,new z(t,e)))||0===e},A.isNaN=function(){return!this.s},A.isNegative=function(){return this.s<0},A.isPositive=function(){return this.s>0},A.isZero=function(){return!!this.c&&0==this.c[0]},A.minus=function(t,e){var r,n,o,i,u=this,a=u.s;if(e=(t=new z(t,e)).s,!a||!e)return new z(NaN);if(a!=e)return t.s=-e,u.plus(t);var s=u.e/_,f=t.e/_,c=u.c,g=t.c;if(!s||!f){if(!c||!g)return c?(t.s=-e,t):new z(g?u:NaN);if(!c[0]||!g[0])return g[0]?(t.s=-e,t):new z(c[0]?u:3==F?-0:0)}if(s=m(s),f=m(f),c=c.slice(),a=s-f){for((i=a<0)?(a=-a,o=c):(f=s,o=g),o.reverse(),e=a;e--;o.push(0));o.reverse()}else for(n=(i=(a=c.length)<(e=g.length))?a:e,a=e=0;e<n;e++)if(c[e]!=g[e]){i=c[e]<g[e];break}if(i&&(o=c,c=g,g=o,t.s=-t.s),(e=(n=g.length)-(r=c.length))>0)for(;e--;c[r++]=0);for(e=l-1;n>a;){if(c[--n]<g[n]){for(r=n;r&&!c[--r];c[r]=e);--c[r],c[n]+=l}c[n]-=g[n]}for(;0==c[0];c.splice(0,1),--f);return c[0]?$(t,c,f):(t.s=3==F?-1:1,t.c=[t.e=0],t)},A.modulo=A.mod=function(t,e){var n,o,i=this;return t=new z(t,e),!i.c||!t.s||t.c&&!t.c[0]?new z(NaN):!t.c||i.c&&!i.c[0]?new z(i):(9==B?(o=t.s,t.s=1,n=r(i,t,0,3),t.s=o,n.s*=o):n=r(i,t,0,B),(t=i.minus(n.times(t))).c[0]||1!=B||(t.s=i.s),t)},A.multipliedBy=A.times=function(t,e){var r,n,o,i,u,a,s,f,c,g,p,h,y,v,b,w=this,T=w.c,S=(t=new z(t,e)).c;if(!(T&&S&&T[0]&&S[0]))return!w.s||!t.s||T&&!T[0]&&!S||S&&!S[0]&&!T?t.c=t.e=t.s=null:(t.s*=w.s,T&&S?(t.c=[0],t.e=0):t.c=t.e=null),t;for(n=m(w.e/_)+m(t.e/_),t.s*=w.s,(s=T.length)<(g=S.length)&&(y=T,T=S,S=y,o=s,s=g,g=o),o=s+g,y=[];o--;y.push(0));for(v=l,b=d,o=g;--o>=0;){for(r=0,p=S[o]%b,h=S[o]/b|0,i=o+(u=s);i>o;)r=((f=p*(f=T[--u]%b)+(a=h*f+(c=T[u]/b|0)*p)%b*b+y[i]+r)/v|0)+(a/b|0)+h*c,y[i--]=f%v;y[i]=r}return r?++n:y.splice(0,1),$(t,y,n)},A.negated=function(){var t=new z(this);return t.s=-t.s||null,t},A.plus=function(t,e){var r,n=this,o=n.s;if(e=(t=new z(t,e)).s,!o||!e)return new z(NaN);if(o!=e)return t.s=-e,n.minus(t);var i=n.e/_,u=t.e/_,a=n.c,s=t.c;if(!i||!u){if(!a||!s)return new z(o/0);if(!a[0]||!s[0])return s[0]?t:new z(a[0]?n:0*o)}if(i=m(i),u=m(u),a=a.slice(),o=i-u){for(o>0?(u=i,r=s):(o=-o,r=a),r.reverse();o--;r.push(0));r.reverse()}for((o=a.length)-(e=s.length)<0&&(r=s,s=a,a=r,e=o),o=0;e;)o=(a[--e]=a[e]+s[e]+o)/l|0,a[e]=l===a[e]?0:a[e]%l;return o&&(a=[o].concat(a),++u),$(t,a,u)},A.precision=A.sd=function(t,e){var r,n,o,i=this;if(null!=t&&t!==!!t)return b(t,1,h),null==e?e=F:b(e,0,8),V(new z(i),t,e);if(!(r=i.c))return null;if(n=(o=r.length-1)*_+1,o=r[o]){for(;o%10==0;o/=10,n--);for(o=r[0];o>=10;o/=10,n++);}return t&&i.e+1>n&&(n=i.e+1),n},A.shiftedBy=function(t){return b(t,-9007199254740991,g),this.times("1e"+t)},A.squareRoot=A.sqrt=function(){var t,e,n,o,i,u=this,a=u.c,s=u.s,f=u.e,c=O+4,l=new z("0.5");if(1!==s||!a||!a[0])return new z(!s||s<0&&(!a||a[0])?NaN:a?u:1/0);if(0==(s=Math.sqrt(+Z(u)))||s==1/0?(((e=y(a)).length+f)%2==0&&(e+="0"),s=Math.sqrt(+e),f=m((f+1)/2)-(f<0||f%2),n=new z(e=s==1/0?"5e"+f:(e=s.toExponential()).slice(0,e.indexOf("e")+1)+f)):n=new z(s+""),n.c[0])for((s=(f=n.e)+c)<3&&(s=0);;)if(i=n,n=l.times(i.plus(r(u,i,c,1))),y(i.c).slice(0,s)===(e=y(n.c)).slice(0,s)){if(n.e<f&&--s,"9999"!=(e=e.slice(s-3,s+1))&&(o||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(V(n,n.e+O+2,1),t=!n.times(n).eq(u));break}if(!o&&(V(i,i.e+O+2,0),i.times(i).eq(u))){n=i;break}c+=4,s+=4,o=1}return V(n,n.e+O+1,F,t)},A.toExponential=function(t,e){return null!=t&&(b(t,0,h),t++),G(this,t,e,1)},A.toFixed=function(t,e){return null!=t&&(b(t,0,h),t=t+this.e+1),G(this,t,e)},A.toFormat=function(t,e,r){var n,o=this;if(null==r)null!=t&&e&&"object"==typeof e?(r=e,e=null):t&&"object"==typeof t?(r=t,t=e=null):r=W;else if("object"!=typeof r)throw Error(f+"Argument not an object: "+r);if(n=o.toFixed(t,e),o.c){var i,u=n.split("."),a=+r.groupSize,s=+r.secondaryGroupSize,c=r.groupSeparator||"",l=u[0],_=u[1],g=o.s<0,p=g?l.slice(1):l,d=p.length;if(s&&(i=a,a=s,s=i,d-=i),a>0&&d>0){for(i=d%a||a,l=p.substr(0,i);i<d;i+=a)l+=c+p.substr(i,a);s>0&&(l+=c+p.slice(i)),g&&(l="-"+l)}n=_?l+(r.decimalSeparator||"")+((s=+r.fractionGroupSize)?_.replace(new RegExp("\\d{"+s+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):_):l}return(r.prefix||"")+n+(r.suffix||"")},A.toFraction=function(t){var e,n,o,i,u,a,s,c,l,g,d,h,m=this,v=m.c;if(null!=t&&(!(s=new z(t)).isInteger()&&(s.c||1!==s.s)||s.lt(N)))throw Error(f+"Argument "+(s.isInteger()?"out of range: ":"not an integer: ")+Z(s));if(!v)return new z(m);for(e=new z(N),l=n=new z(N),o=c=new z(N),h=y(v),u=e.e=h.length-m.e-1,e.c[0]=p[(a=u%_)<0?_+a:a],t=!t||s.comparedTo(e)>0?u>0?e:l:s,a=P,P=1/0,s=new z(h),c.c[0]=0;g=r(s,e,0,1),1!=(i=n.plus(g.times(o))).comparedTo(t);)n=o,o=i,l=c.plus(g.times(i=l)),c=i,e=s.minus(g.times(i=e)),s=i;return i=r(t.minus(n),o,0,1),c=c.plus(i.times(l)),n=n.plus(i.times(o)),c.s=l.s=m.s,d=r(l,o,u*=2,F).minus(m).abs().comparedTo(r(c,n,u,F).minus(m).abs())<1?[l,o]:[c,n],P=a,d},A.toNumber=function(){return+Z(this)},A.toPrecision=function(t,e){return null!=t&&b(t,1,h),G(this,t,e,2)},A.toString=function(t){var e,r=this,o=r.s,i=r.e;return null===i?o?(e="Infinity",o<0&&(e="-"+e)):e="NaN":(null==t?e=i<=k||i>=C?T(y(r.c),i):S(y(r.c),i,"0"):10===t&&D?e=S(y((r=V(new z(r),O+i+1,F)).c),r.e,"0"):(b(t,2,q.length,"Base"),e=n(S(y(r.c),i,"0"),10,t,o,!0)),o<0&&r.c[0]&&(e="-"+e)),e},A.valueOf=A.toJSON=function(){return Z(this)},A._isBigNumber=!0,null!=e&&z.set(e),z}(),i.default=i.BigNumber=i,void 0===(n=function(){return i}.call(e,r,e,t))||(t.exports=n)}()},818:(t,e)=>{var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};"undefined"!=typeof window&&window.document,"undefined"!=typeof process&&null!=process.versions&&process.versions.node;"object"===("undefined"==typeof self?"undefined":r(self))&&self.constructor&&self.constructor.name,"undefined"!=typeof window&&"nodejs"===window.name||"undefined"!=typeof navigator&&(navigator.userAgent.includes("Node.js")||navigator.userAgent.includes("jsdom")),"undefined"!=typeof Deno&&void 0!==Deno.version&&Deno.version.deno},257:(t,e)=>{for(var r="0123456789abcdef".split(""),n=[],o=[],i=0;i<256;i++)n[i]=r[i>>4&15]+r[15&i],i<16&&(i<10?o[48+i]=i:o[87+i]=i);e.c=function(t){for(var e=t.length,r="",o=0;o<e;)r+=n[t[o++]];return r},e.J=function(t){for(var e=t.length>>1,r=e<<1,n=new Uint8Array(e),i=0,u=0;u<r;)n[i++]=o[t.charCodeAt(u++)]<<4|o[t.charCodeAt(u++)];return n}},400:(t,e,r)=>{var n=r(123).stringify,o=r(813);t.exports=function(t){return{parse:o(t),stringify:n}},t.exports.parse=o(),t.exports.stringify=n},813:(t,e,r)=>{var n=null;const o=/(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/,i=/(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;t.exports=function(t){var e={strict:!1,storeAsString:!1,alwaysParseAsBig:!1,useNativeBigInt:!1,protoAction:"error",constructorAction:"error"};if(null!=t){if(!0===t.strict&&(e.strict=!0),!0===t.storeAsString&&(e.storeAsString=!0),e.alwaysParseAsBig=!0===t.alwaysParseAsBig&&t.alwaysParseAsBig,e.useNativeBigInt=!0===t.useNativeBigInt&&t.useNativeBigInt,void 0!==t.constructorAction){if("error"!==t.constructorAction&&"ignore"!==t.constructorAction&&"preserve"!==t.constructorAction)throw new Error(`Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${t.constructorAction}`);e.constructorAction=t.constructorAction}if(void 0!==t.protoAction){if("error"!==t.protoAction&&"ignore"!==t.protoAction&&"preserve"!==t.protoAction)throw new Error(`Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${t.protoAction}`);e.protoAction=t.protoAction}}var u,a,s,f,c={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},l=function(t){throw{name:"SyntaxError",message:t,at:u,text:s}},_=function(t){return t&&t!==a&&l("Expected '"+t+"' instead of '"+a+"'"),a=s.charAt(u),u+=1,a},g=function(){var t,o="";for("-"===a&&(o="-",_("-"));a>="0"&&a<="9";)o+=a,_();if("."===a)for(o+=".";_()&&a>="0"&&a<="9";)o+=a;if("e"===a||"E"===a)for(o+=a,_(),"-"!==a&&"+"!==a||(o+=a,_());a>="0"&&a<="9";)o+=a,_();if(t=+o,isFinite(t))return null==n&&(n=r(431)),o.length>15?e.storeAsString?o:e.useNativeBigInt?BigInt(o):new n(o):e.alwaysParseAsBig?e.useNativeBigInt?BigInt(t):new n(t):t;l("Bad number")},p=function(){var t,e,r,n="";if('"'===a)for(var o=u;_();){if('"'===a)return u-1>o&&(n+=s.substring(o,u-1)),_(),n;if("\\"===a){if(u-1>o&&(n+=s.substring(o,u-1)),_(),"u"===a){for(r=0,e=0;e<4&&(t=parseInt(_(),16),isFinite(t));e+=1)r=16*r+t;n+=String.fromCharCode(r)}else{if("string"!=typeof c[a])break;n+=c[a]}o=u}}l("Bad string")},d=function(){for(;a&&a<=" ";)_()};return f=function(){switch(d(),a){case"{":return function(){var t,r=Object.create(null);if("{"===a){if(_("{"),d(),"}"===a)return _("}"),r;for(;a;){if(t=p(),d(),_(":"),!0===e.strict&&Object.hasOwnProperty.call(r,t)&&l('Duplicate key "'+t+'"'),!0===o.test(t)?"error"===e.protoAction?l("Object contains forbidden prototype property"):"ignore"===e.protoAction?f():r[t]=f():!0===i.test(t)?"error"===e.constructorAction?l("Object contains forbidden constructor property"):"ignore"===e.constructorAction?f():r[t]=f():r[t]=f(),d(),"}"===a)return _("}"),r;_(","),d()}}l("Bad object")}();case"[":return function(){var t=[];if("["===a){if(_("["),d(),"]"===a)return _("]"),t;for(;a;){if(t.push(f()),d(),"]"===a)return _("]"),t;_(","),d()}}l("Bad array")}();case'"':return p();case"-":return g();default:return a>="0"&&a<="9"?g():function(){switch(a){case"t":return _("t"),_("r"),_("u"),_("e"),!0;case"f":return _("f"),_("a"),_("l"),_("s"),_("e"),!1;case"n":return _("n"),_("u"),_("l"),_("l"),null}l("Unexpected '"+a+"'")}()}},function(t,e){var r;return s=t+"",u=0,a=" ",r=f(),d(),a&&l("Syntax error"),"function"==typeof e?function t(r,n){var o,i=r[n];return i&&"object"==typeof i&&Object.keys(i).forEach((function(e){void 0!==(o=t(i,e))?i[e]=o:delete i[e]})),e.call(r,n,i)}({"":r},""):r}}},123:(t,e,r)=>{var n=r(431),o=t.exports;!function(){var t,e,r,i=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,u={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function a(t){return i.lastIndex=0,i.test(t)?'"'+t.replace(i,(function(t){var e=u[t];return"string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+t+'"'}function s(o,i){var u,f,c,l,_,g=t,p=i[o],d=null!=p&&(p instanceof n||n.isBigNumber(p));switch(p&&"object"==typeof p&&"function"==typeof p.toJSON&&(p=p.toJSON(o)),"function"==typeof r&&(p=r.call(i,o,p)),typeof p){case"string":return d?p:a(p);case"number":return isFinite(p)?String(p):"null";case"boolean":case"null":case"bigint":return String(p);case"object":if(!p)return"null";if(t+=e,_=[],"[object Array]"===Object.prototype.toString.apply(p)){for(l=p.length,u=0;u<l;u+=1)_[u]=s(u,p)||"null";return c=0===_.length?"[]":t?"[\n"+t+_.join(",\n"+t)+"\n"+g+"]":"["+_.join(",")+"]",t=g,c}if(r&&"object"==typeof r)for(l=r.length,u=0;u<l;u+=1)"string"==typeof r[u]&&(c=s(f=r[u],p))&&_.push(a(f)+(t?": ":":")+c);else Object.keys(p).forEach((function(e){var r=s(e,p);r&&_.push(a(e)+(t?": ":":")+r)}));return c=0===_.length?"{}":t?"{\n"+t+_.join(",\n"+t)+"\n"+g+"}":"{"+_.join(",")+"}",t=g,c}}"function"!=typeof o.stringify&&(o.stringify=function(n,o,i){var u;if(t="",e="","number"==typeof i)for(u=0;u<i;u+=1)e+=" ";else"string"==typeof i&&(e=i);if(r=o,o&&"function"!=typeof o&&("object"!=typeof o||"number"!=typeof o.length))throw new Error("JSON.stringify");return s("",{"":n})})}()}},n={};function o(t){var e=n[t];if(void 0!==e)return e.exports;var i=n[t]={id:t,loaded:!1,exports:{}};return r[t].call(i.exports,i,i.exports,o),i.loaded=!0,i.exports}o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var i={};(()=>{function r(){throw new Error("Failed pattern match")}o.d(i,{J:()=>ic});const n=function(t){return function(e){return function(){return t(e)}}},u=function(t){return function(e){return function(r){return function(){return t(e,r)}}}},a=function(t){return function(e){return function(r){return function(n){return function(){return t(e,r,n)}}}}},s=function(t){return function(e){return function(r){return function(n){return function(o){return function(){return t(e,r,n,o)}}}}}},f=function(t){return function(e){return function(r){return function(n){return function(o){return function(i){return function(){return t(e,r,n,o,i)}}}}}}},c=function(t){return t.toString()},l=function(t){var e=t.length;return'"'+t.replace(/[\0-\x1F\x7F"\\]/g,(function(r,n){switch(r){case'"':case"\\":return"\\"+r;case"":return"\\a";case"\b":return"\\b";case"\f":return"\\f";case"\n":return"\\n";case"\r":return"\\r";case"\t":return"\\t";case"\v":return"\\v"}var o=n+1,i=o<e&&t[o]>="0"&&t[o]<="9"?"\\&":"";return"\\"+r.charCodeAt(0).toString(10)+i}))+'"'},_=t=>t,g=_("LT"),p=_("GT"),d=_("EQ"),h=(t,e)=>({tag:t,_1:e}),m=h("Nothing"),y=t=>h("Just",t),v=t=>"Nothing"===t.tag||"Just"!==t.tag&&void r(),b={map:t=>e=>"Just"===e.tag?h("Just",t(e._1)):m},w={apply:t=>e=>"Just"===t.tag?"Just"===e.tag?h("Just",t._1(e._1)):m:"Nothing"===t.tag?m:void r(),Functor0:()=>b},T={bind:t=>e=>"Just"===t.tag?e(t._1):"Nothing"===t.tag?m:void r(),Apply0:()=>w},S={pure:y,Apply0:()=>w},x={Applicative0:()=>S,Bind1:()=>T},L=(t,e)=>({tag:"NonEmpty",_1:t,_2:e}),J=(t,e)=>({tag:"Tuple",_1:t,_2:e}),E=t=>e=>J(t,e),R=t=>t._2,I=t=>t._1,A=(t,e,r)=>({tag:t,_1:e,_2:r}),N=A("Nil"),O=t=>e=>A("Cons",t,e),F={foldr:t=>e=>{const n=F.foldl((e=>r=>t(r)(e)))(e),o=(i=N,t=>{let e,n=i,o=t,u=!0;for(;u;){const t=n,i=o;"Nil"!==i.tag?"Cons"!==i.tag?r():(n=A("Cons",i._1,t),o=i._2):(u=!1,e=t)}return e});var i;return t=>n(o(t))},foldl:t=>e=>n=>{let o,i=e,u=n,a=!0;for(;a;){const e=i,n=u;"Nil"!==n.tag?"Cons"!==n.tag?r():(i=t(e)(n._1),u=n._2):(a=!1,o=e)}return o},foldMap:t=>{const e=t.mempty;return r=>F.foldl((e=>{const n=t.Semigroup0().append(e);return t=>n(r(t))}))(e)}},k={append:t=>e=>L(t._1,F.foldr(O)(A("Cons",e._1,e._2))(t._2))},C=(t,e)=>({tag:t,_1:e}),M=t=>C("Left",t),P=t=>C("Right",t),U={map:t=>e=>"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",t(e._1)):void r()},B=t=>"Left"===t.tag?m:"Right"===t.tag?h("Just",t._1):void r(),j={apply:t=>e=>{if("Left"===t.tag)return C("Left",t._1);if("Right"===t.tag){if("Left"===e.tag)return C("Left",e._1);if("Right"===e.tag)return C("Right",t._1(e._1))}r()},Functor0:()=>U},W={pure:P,Apply0:()=>j},q=(()=>({tag:"Proxy"}))(),D=function(t){return function(e){for(var r=e.length,n=new Array(r),o=0;o<r;o++)n[o]=t(e[o]);return n}},z={map:D},G=t=>t,H=function(t){return function(e){return function(r){for(var n=e,o=r.length-1;o>=0;o--)n=t(r[o])(n);return n}}},$=function(t){return function(e){return function(r){for(var n=e,o=r.length,i=0;i<o;i++)n=t(n)(r[i]);return n}}},V=t=>t,Z=t=>{const e=t.Apply0();return r=>n=>r.foldr((t=>{const r=n(t);return t=>e.apply(e.Functor0().map((t=>G))(r))(t)}))(t.pure())},K={foldr:H,foldl:$,foldMap:t=>{const e=t.mempty;return r=>K.foldr((e=>n=>t.Semigroup0().append(r(e))(n)))(e)}},Q=function(t){return t},Y={map:t=>e=>t(e)},X={apply:t=>e=>t(e),Functor0:()=>Y},tt={bind:t=>e=>e(t),Apply0:()=>X},et={pure:t=>t,Apply0:()=>X},rt={Applicative0:()=>et,Bind1:()=>tt},nt=function(){function t(t){return[t]}function e(t){return function(e){return[t,e]}}function r(t){return function(e){return function(r){return[t,e,r]}}}function n(t){return function(e){return t.concat(e)}}return function(o){return function(i){return function(u){return function(a){return function(s){return function f(c,l){switch(l-c){case 0:return u([]);case 1:return i(t)(a(s[c]));case 2:return o(i(e)(a(s[c])))(a(s[c+1]));case 3:return o(o(i(r)(a(s[c])))(a(s[c+1])))(a(s[c+2]));default:var _=c+2*Math.floor((l-c)/4);return o(i(n)(f(c,_)))(f(_,l))}}(0,s.length)}}}}}}(),ot=t=>t,it=t=>e=>n=>"Nothing"===n.tag?t.pure(m):"Just"===n.tag?t.Apply0().Functor0().map(y)(e(n._1)):void r(),ut=t=>e=>n=>"Left"===n.tag?t.pure(C("Left",n._1)):"Right"===n.tag?t.Apply0().Functor0().map(P)(e(n._1)):void r(),at={traverse:t=>{const e=t.Apply0();return nt(e.apply)(e.Functor0().map)(t.pure)},sequence:t=>at.traverse(t)(ot),Functor0:()=>z,Foldable1:()=>K};var st=function(t){return function(e){return t===e}};const ft=function(t){return function(e){return function(r){if(e.length!==r.length)return!1;for(var n=0;n<e.length;n++)if(!t(e[n])(r[n]))return!1;return!0}}},ct={eq:st},lt={eq:st};var _t=function(t){return function(e){return function(r){return function(n){return function(o){return n<o?t:n===o?e:r}}}}};const gt=_t,pt={compare:_t(g)(d)(p),Eq0:()=>ct},dt={compare:gt(g)(d)(p),Eq0:()=>lt},ht=function(t){throw new Error(t)},mt={hfoldlWithIndex:t=>t=>e=>t},yt=t=>e=>({hfoldlWithIndex:r=>n=>o=>e.hfoldlWithIndex(r)(t.foldingWithIndex(r)(q)(n)(q))(q)});function vt(t,e){return e[t]()}function bt(t,e,r){return e[t](r)}function wt(t,e,r,n){return e[t](r,n)}function Tt(t,e,r,n,o){return e[t](r,n,o)}const St=function(t){return function(e){return e[t]}},xt=function(t){return function(e){return function(r){var n={};for(var o in r)({}).hasOwnProperty.call(r,o)&&(n[o]=r[o]);return n[t]=e,n}}},Lt=function(t){return function(e){var r={};for(var n in e)n!==t&&{}.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}},Jt=(()=>({tag:"MkFFIStep"}))(),Et=t=>()=>e=>()=>()=>({foldingWithIndex:r=>r=>n=>o=>xt(t.reflectSymbol(r))(e.mthFn(r)(q))(n)}),Rt=t=>()=>()=>e=>()=>()=>({foldingWithIndex:r=>r=>n=>o=>xt(t.reflectSymbol(r))(e.mthFn(r)(q))(n)}),It=()=>()=>t=>e=>t.hfoldlWithIndex(Jt)({})(q),At=yt(Rt({reflectSymbol:()=>"free"})()()({mthFn:t=>t=>u(vt)("free")})()()),Nt={reflectSymbol:()=>"kind"},Ot=yt(Rt({reflectSymbol:()=>"to_bytes"})()()({mthFn:t=>t=>u(vt)("to_bytes")})()()),Ft=yt(Rt({reflectSymbol:()=>"to_js_value"})()()({mthFn:t=>t=>u(vt)("to_js_value")})()()),kt=yt(Rt({reflectSymbol:()=>"to_json"})()()({mthFn:t=>t=>u(vt)("to_json")})()()),Ct={reflectSymbol:()=>"to_keyhash"},Mt={reflectSymbol:()=>"to_scripthash"},Pt=yt(Rt({reflectSymbol:()=>"from_bytes"})()()({mthFn:t=>t=>a(bt)("from_bytes")})()()),Ut=yt(Rt({reflectSymbol:()=>"from_json"})()()({mthFn:t=>t=>a(bt)("from_json")})()()),Bt={reflectSymbol:()=>"header"},jt={reflectSymbol:()=>"network_id"},Wt={reflectSymbol:()=>"payment_cred"},qt={reflectSymbol:()=>"to_bech32"},Dt={reflectSymbol:()=>"from_bech32"},zt={reflectSymbol:()=>"header_matches_kind"},Gt={reflectSymbol:()=>"is_valid"},Ht={reflectSymbol:()=>"is_valid_bech32"},$t={reflectSymbol:()=>"is_valid_byron"},Vt=(()=>At(yt(Rt(Nt)()()({mthFn:t=>t=>u(vt)("kind")})()())(Ot(Ft(kt(yt(Rt(Ct)()()({mthFn:t=>t=>u(vt)("to_keyhash")})()())(yt(Rt(Mt)()()({mthFn:t=>t=>u(vt)("to_scripthash")})()())(mt))))))).hfoldlWithIndex(Jt)({})(q))(),Zt=(()=>At(yt(Rt(Bt)()()({mthFn:t=>t=>u(vt)("header")})()())(yt(Rt(jt)()()({mthFn:t=>t=>u(vt)("network_id")})()())(yt(Rt(Wt)()()({mthFn:t=>t=>u(vt)("payment_cred")})()())(yt(Rt(qt)()()({mthFn:t=>t=>a(bt)("to_bech32")})()())(Ot(Ft(kt(mt)))))))).hfoldlWithIndex(Jt)({})(q))(),Kt=(()=>yt(Rt(Dt)()()({mthFn:t=>t=>a(bt)("from_bech32")})()())(Pt(Ut(yt(Rt(zt)()()({mthFn:t=>t=>s(wt)("header_matches_kind")})()())(yt(Rt(Gt)()()({mthFn:t=>t=>a(bt)("is_valid")})()())(yt(Rt(Ht)()()({mthFn:t=>t=>a(bt)("is_valid_bech32")})()())(yt(Rt($t)()()({mthFn:t=>t=>a(bt)("is_valid_byron")})()())(mt))))))).hfoldlWithIndex(Jt)({})(q))(),Qt=yt(Rt({reflectSymbol:()=>"from_json"})()()({mthFn:t=>t=>a(bt)("from_json")})()()),Yt={reflectSymbol:()=>"new"},Xt=(()=>Qt(yt(Rt(Yt)()()({mthFn:t=>t=>u(vt)("new")})()())(mt)).hfoldlWithIndex(Jt)({})(q))(),te={reflectSymbol:()=>"free"},ee={reflectSymbol:()=>"to_bech32"},re={reflectSymbol:()=>"to_bytes"},ne={reflectSymbol:()=>"to_hex"},oe=(()=>yt(Rt(te)()()({mthFn:t=>t=>u(vt)("free")})()())(yt(Rt(ee)()()({mthFn:t=>t=>a(bt)("to_bech32")})()())(yt(Rt(re)()()({mthFn:t=>t=>u(vt)("to_bytes")})()())(yt(Rt(ne)()()({mthFn:t=>t=>u(vt)("to_hex")})()())(mt)))).hfoldlWithIndex(Jt)({})(q))(),ie=yt(Rt({reflectSymbol:()=>"checked_add"})()()({mthFn:t=>t=>a(bt)("checked_add")})()()),ue=yt(Rt({reflectSymbol:()=>"checked_sub"})()()({mthFn:t=>t=>a(bt)("checked_sub")})()()),ae=yt(Rt({reflectSymbol:()=>"clamped_sub"})()()({mthFn:t=>t=>a(bt)("clamped_sub")})()()),se={reflectSymbol:()=>"coin"},fe=yt(Rt({reflectSymbol:()=>"compare"})()()({mthFn:t=>t=>a(bt)("compare")})()()),ce=yt(Rt({reflectSymbol:()=>"free"})()()({mthFn:t=>t=>u(vt)("free")})()()),le=yt(Rt({reflectSymbol:()=>"is_zero"})()()({mthFn:t=>t=>u(vt)("is_zero")})()()),_e={reflectSymbol:()=>"multiasset"},ge={reflectSymbol:()=>"set_coin"},pe={reflectSymbol:()=>"set_multiasset"},de=yt(Rt({reflectSymbol:()=>"to_bytes"})()()({mthFn:t=>t=>u(vt)("to_bytes")})()()),he=yt(Rt({reflectSymbol:()=>"to_js_value"})()()({mthFn:t=>t=>u(vt)("to_js_value")})()()),me=yt(Rt({reflectSymbol:()=>"to_json"})()()({mthFn:t=>t=>u(vt)("to_json")})()())(mt),ye=de(he(me)),ve=yt(Rt({reflectSymbol:()=>"from_bytes"})()()({mthFn:t=>t=>a(bt)("from_bytes")})()()),be=yt(Rt({reflectSymbol:()=>"from_json"})()()({mthFn:t=>t=>a(bt)("from_json")})()()),we={reflectSymbol:()=>"new_from_assets"},Te={reflectSymbol:()=>"plutus_data"},Se={reflectSymbol:()=>"redeemers"},xe={reflectSymbol:()=>"input"},Le={reflectSymbol:()=>"output"},Je={reflectSymbol:()=>"new"},Ee=yt(Rt(Je)()()({mthFn:t=>t=>s(wt)("new")})()())(mt),Re={reflectSymbol:()=>"address"},Ie={reflectSymbol:()=>"amount"},Ae={reflectSymbol:()=>"datum"},Ne={reflectSymbol:()=>"auxiliary_data"},Oe={reflectSymbol:()=>"body"},Fe={reflectSymbol:()=>"index"},ke={reflectSymbol:()=>"transaction_id"},Ce={reflectSymbol:()=>"to_bech32"},Me={reflectSymbol:()=>"to_hex"},Pe=It()()(ce(yt(Rt(Ce)()()({mthFn:t=>t=>a(bt)("to_bech32")})()())(de(yt(Rt(Me)()()({mthFn:t=>t=>u(vt)("to_hex")})()())(mt))))),Ue=yt(Rt({reflectSymbol:()=>"get"})()()({mthFn:t=>t=>a(bt)("get")})()()),Be={reflectSymbol:()=>"get_asset"},je=yt(Rt({reflectSymbol:()=>"insert"})()()({mthFn:t=>t=>s(wt)("insert")})()()),We=yt(Rt({reflectSymbol:()=>"keys"})()()({mthFn:t=>t=>u(vt)("keys")})()()),qe=yt(Rt({reflectSymbol:()=>"len"})()()({mthFn:t=>t=>u(vt)("len")})()()),De={reflectSymbol:()=>"set_asset"},ze={reflectSymbol:()=>"sub"},Ge={reflectSymbol:()=>"as_data_hash"},He={reflectSymbol:()=>"as_inline_data"},$e={reflectSymbol:()=>"kind"},Ve={reflectSymbol:()=>"checked_div"},Ze={reflectSymbol:()=>"checked_div_ceil"},Ke={reflectSymbol:()=>"checked_mul"},Qe=de(yt(Rt({reflectSymbol:()=>"to_str"})()()({mthFn:t=>t=>u(vt)("to_str")})()())(mt)),Ye={reflectSymbol:()=>"from_str"},Xe=It()()(ve(yt(Rt(Ye)()()({mthFn:t=>t=>a(bt)("from_str")})()())(mt))),tr=qe(ye),er={reflectSymbol:()=>"add"},rr={reflectSymbol:()=>"name"},nr=(()=>ie(ue(ae(yt(Rt(se)()()({mthFn:t=>t=>u(vt)("coin")})()())(fe(ce(le(yt(Rt(_e)()()({mthFn:t=>t=>u(vt)("multiasset")})()())(yt(Rt(ge)()()({mthFn:t=>t=>a(bt)("set_coin")})()())(yt(Rt(pe)()()({mthFn:t=>t=>a(bt)("set_multiasset")})()())(ye)))))))))).hfoldlWithIndex(Jt)({})(q))(),or=(()=>ve(be(yt(Rt(we)()()({mthFn:t=>t=>a(bt)("new_from_assets")})()())(mt))).hfoldlWithIndex(Jt)({})(q))(),ir=(()=>ce(yt(Rt(Te)()()({mthFn:t=>t=>u(vt)("plutus_data")})()())(yt(Rt(Se)()()({mthFn:t=>t=>u(vt)("redeemers")})()())(ye))).hfoldlWithIndex(Jt)({})(q))(),ur=(()=>ve(be(mt)).hfoldlWithIndex(Jt)({})(q))(),ar=(()=>ce(yt(Rt(xe)()()({mthFn:t=>t=>u(vt)("input")})()())(yt(Rt(Le)()()({mthFn:t=>t=>u(vt)("output")})()())(mt))).hfoldlWithIndex(Jt)({})(q))(),sr=(()=>ve(Ee).hfoldlWithIndex(Jt)({})(q))(),fr=(()=>yt(Rt(Re)()()({mthFn:t=>t=>u(vt)("address")})()())(yt(Rt(Ie)()()({mthFn:t=>t=>u(vt)("amount")})()())(yt(Rt(Ae)()()({mthFn:t=>t=>u(vt)("datum")})()())(ce(mt)))).hfoldlWithIndex(Jt)({})(q))(),cr=(()=>yt(Rt(Ne)()()({mthFn:t=>t=>u(vt)("auxiliary_data")})()())(yt(Rt(Oe)()()({mthFn:t=>t=>u(vt)("body")})()())(ce(de(me)))).hfoldlWithIndex(Jt)({})(q))(),lr=(()=>ce(yt(Rt(Fe)()()({mthFn:t=>t=>u(vt)("index")})()())(yt(Rt(ke)()()({mthFn:t=>t=>u(vt)("transaction_id")})()())(mt))).hfoldlWithIndex(Jt)({})(q))(),_r=Pe(q),gr=(()=>ve(be(yt(Rt(Je)()()({mthFn:t=>t=>f(Tt)("new")})()())(mt))).hfoldlWithIndex(Jt)({})(q))(),pr=Pe(q),dr=(()=>ce(Ue(yt(Rt(Be)()()({mthFn:t=>t=>s(wt)("get_asset")})()())(je(We(qe(yt(Rt(De)()()({mthFn:t=>t=>f(Tt)("set_asset")})()())(yt(Rt(ze)()()({mthFn:t=>t=>a(bt)("sub")})()())(ye)))))))).hfoldlWithIndex(Jt)({})(q))(),hr=(()=>yt(Rt(Ge)()()({mthFn:t=>t=>u(vt)("as_data_hash")})()())(yt(Rt(He)()()({mthFn:t=>t=>u(vt)("as_inline_data")})()())(ce(yt(Rt($e)()()({mthFn:t=>t=>u(vt)("kind")})()())(mt)))).hfoldlWithIndex(Jt)({})(q))(),mr=Pe(q),yr=(()=>ie(yt(Rt(Ve)()()({mthFn:t=>t=>a(bt)("checked_div")})()())(yt(Rt(Ze)()()({mthFn:t=>t=>a(bt)("checked_div_ceil")})()())(yt(Rt(Ke)()()({mthFn:t=>t=>a(bt)("checked_mul")})()())(ue(ae(fe(ce(le(Qe))))))))).hfoldlWithIndex(Jt)({})(q))(),vr=Xe(q),br=(()=>ce(Ue(je(We(tr)))).hfoldlWithIndex(Jt)({})(q))(),wr=(()=>yt(Rt(er)()()({mthFn:t=>t=>a(bt)("add")})()())(ce(Ue(tr))).hfoldlWithIndex(Jt)({})(q))(),Tr=(()=>ce(yt(Rt(rr)()()({mthFn:t=>t=>u(vt)("name")})()())(ye)).hfoldlWithIndex(Jt)({})(q))(),Sr={reflectSymbol:()=>"add"},xr=yt(Rt({reflectSymbol:()=>"free"})()()({mthFn:t=>t=>u(vt)("free")})()()),Lr={reflectSymbol:()=>"get"},Jr={reflectSymbol:()=>"len"},Er=yt(Rt({reflectSymbol:()=>"to_bytes"})()()({mthFn:t=>t=>u(vt)("to_bytes")})()()),Rr={reflectSymbol:()=>"to_js_value"},Ir={reflectSymbol:()=>"to_json"},Ar={reflectSymbol:()=>"to_bech32"},Nr={reflectSymbol:()=>"to_hex"},Or=(()=>yt(Rt(Sr)()()({mthFn:t=>t=>a(bt)("add")})()())(xr(yt(Rt(Lr)()()({mthFn:t=>t=>a(bt)("get")})()())(yt(Rt(Jr)()()({mthFn:t=>t=>u(vt)("len")})()())(Er(yt(Rt(Rr)()()({mthFn:t=>t=>u(vt)("to_js_value")})()())(yt(Rt(Ir)()()({mthFn:t=>t=>u(vt)("to_json")})()())(mt))))))).hfoldlWithIndex(Jt)({})(q))(),Fr=(()=>xr(yt(Rt(Ar)()()({mthFn:t=>t=>a(bt)("to_bech32")})()())(Er(yt(Rt(Nr)()()({mthFn:t=>t=>u(vt)("to_hex")})()())(mt)))).hfoldlWithIndex(Jt)({})(q))(),kr=t=>{const e=t.Apply0(),r=e.Functor0(),n=(()=>{const t={map:t=>{const e=r.map(t);return t=>r=>e(t(r))}};return{apply:t=>r=>n=>e.apply(t(n))(r(n)),Functor0:()=>t}})();return{bind:e=>r=>n=>t.bind(e(n))((t=>r(t)(n))),Apply0:()=>n}},Cr=t=>{const e=t.Applicative0(),r=e.Apply0(),n=(()=>{const t=r.Functor0(),n={map:e=>{const r=t.map(e);return t=>e=>r(t(e))}},o={apply:t=>e=>n=>r.apply(t(n))(e(n)),Functor0:()=>n};return{pure:t=>{const r=e.pure(t);return t=>r},Apply0:()=>o}})(),o=kr(t.Bind1());return{Applicative0:()=>n,Bind1:()=>o}},Mr=t=>{const e=Cr(t.Monad0());return{liftEffect:e=>{const r=t.liftEffect(e);return t=>r},Monad0:()=>e}},Pr=function(t){return function(){return t}},Ur={Applicative0:()=>Wr,Bind1:()=>Br},Br={bind:function(t){return function(e){return function(){return e(t())()}}},Apply0:()=>jr},jr={apply:t=>e=>()=>{const r=t(),n=e();return Wr.pure(r(n))()},Functor0:()=>qr},Wr={pure:Pr,Apply0:()=>jr},qr={map:t=>e=>()=>{const r=e();return t(r)}},Dr="function"==typeof Array.prototype.fill?function(t){return function(e){return t<1?[]:new Array(t).fill(e)}}:function(t){return function(e){for(var r=[],n=0,o=0;o<t;o++)r[n++]=e;return r}},zr=function(){function t(t,e){this.head=t,this.tail=e}var e={};function r(e){return function(r){return new t(e,r)}}return function(t){return function(n){return function(t){for(var r=[],n=0,o=t;o!==e;)r[n++]=o.head,o=o.tail;return r}(t(r)(e)(n))}}}(),Gr=function(t){return function(e){return function(r){return function(n){return n<0||n>=r.length?e:t(r[n])}}}},Hr=function(t){return function(e){return function(r){return function(n){for(var o=0,i=n.length;o<i;o++)if(r(n[o]))return t(o);return e}}}},$r=function(t){return function(e){return e.filter(t)}},Vr=function(){function t(e,r,n,o,i,u){var a,s,f,c,l,_;for((a=i+(u-i>>1))-i>1&&t(e,r,o,n,i,a),u-a>1&&t(e,r,o,n,a,u),s=i,f=a,c=i;s<a&&f<u;)l=o[s],_=o[f],r(e(l)(_))>0?(n[c++]=_,++f):(n[c++]=l,++s);for(;s<a;)n[c++]=o[s++];for(;f<u;)n[c++]=o[f++]}return function(e){return function(r){return function(n){var o;return n.length<2?n:(o=n.slice(0),t(e,r,o,n.slice(0),0,n.length),o)}}}}(),Zr=t=>Vr(t)((t=>"GT"===t?1:"EQ"===t?0:"LT"===t?-1:void r())),Kr=t=>e=>Zr((r=>n=>t.compare(e(r))(e(n)))),Qr=Gr(y)(m),Yr=t=>e=>{const n=Zr((e=>r=>t(e._2)(r._2)))((o=E,function(t){return function(e){for(var r=t.length<e.length?t.length:e.length,n=new Array(r),i=0;i<r;i++)n[i]=o(t[i])(e[i]);return n}})((0,function(t){for(var e=0>t?-1:1,r=new Array(e*(t-0)+1),n=0,o=0;n!==t;)r[o++]=n,n+=e;return r[o]=n,r})(e.length-1|0))(e));var o;const i=Qr(n)(0);return"Nothing"===i.tag?[]:"Just"===i.tag?D(R)(Kr(dt)(I)((()=>{const e=function(t){return function(){return t}}([i._1]);return()=>{const o=e();for(const e of n){const n=t((()=>{const t=Qr(o)(o.length-1|0);if("Just"===t.tag)return t._1._2;r()})())(e._2);"LT"!==n&&"GT"!==n&&"EQ"===n||o.push(e)}return o}})()())):void r()},Xr=Hr(y)(m),tn=t=>e=>n=>{const o=Xr((r=>t.eq(r)(e)))(n);return"Nothing"!==o.tag&&("Just"===o.tag||void r())},en=t=>{return e=e=>{const n=t(e);return"Nothing"===n.tag?[]:"Just"===n.tag?[n._1]:void r()},t=>{return(r=t,function(t){for(var e=[],n=0,o=r.length;n<o;n++)Array.prototype.push.apply(e,t(r[n]));return e})(e);var r};var e},rn=function(t){return function(e){for(var r=e.length,n=Array(r),o=0;o<r;o++)n[o]=t(o)(e[o]);return n}},nn={mapWithIndex:rn,Functor0:()=>z},on={foldrWithIndex:t=>e=>{const r=H((e=>{const r=e._1,n=e._2;return e=>t(r)(n)(e)}))(e),n=rn(E);return t=>r(n(t))},foldlWithIndex:t=>e=>{const r=$((e=>r=>t(r._1)(e)(r._2)))(e),n=rn(E);return t=>r(n(t))},foldMapWithIndex:t=>{const e=t.mempty;return r=>on.foldrWithIndex((e=>n=>o=>t.Semigroup0().append(r(e)(n))(o)))(e)},Foldable0:()=>K},un=t=>e=>e(t),an=function(t){return function(e){return function(r){return function(n){return function(o){return function(i){for(var u=[],a=i;;){var s=o(a);u.push(r(s));var f=n(s);if(t(f))return u;a=e(f)}}}}}}},sn=t=>{if("Just"===t.tag)return t._1;r()},fn={unfoldr1:an(v)(sn)(I)(R)},cn=function(t){return function(e){return function(r){return function(n){return function(o){return function(i){for(var u=[],a=i;;){var s=o(a);if(t(s))return u;var f=e(s);u.push(r(f)),a=n(f)}}}}}}},ln=t=>{if("Just"===t.tag)return t._1;r()},_n={unfoldr:cn(v)(ln)(I)(R),Unfoldable10:()=>fn},gn={};function pn(t,e){var r={};for(var n in t)hasOwnProperty.call(t,n)&&(r[n]=e(t[n]));return r}function dn(t){return function(e){return function(r){return function(n){var o=r;function i(t){return function(r){return e(r)(t)(n[t])}}for(var u in n)hasOwnProperty.call(n,u)&&(o=t(o)(i(u)));return o}}}}function hn(t,e,r,n){return r in n?e(n[r]):t}function mn(t){return function(e){var r=[];for(var n in e)hasOwnProperty.call(e,n)&&r.push(t(n)(e[n]));return r}}Object.keys||mn((function(t){return function(){return t}}));const yn=t=>e=>{const r={...e};return t(r)(),r},vn=t=>{const e=zr(t.foldr);return t=>{const r={};for(const n of e(t))r[n._1]=n._2;return r}},bn=dn(un);function wn(t){return t}const Tn=null;function Sn(t){return JSON.stringify(t)}function xn(t){return function(e){return JSON.stringify(e,null,t)}}function Ln(t,e,r,n,o,i,u){return null==u?t():"boolean"==typeof u?e(u):"number"==typeof u?r(u):"string"==typeof u?n(u):"[object Array]"===Object.prototype.toString.call(u)?o(u):i(u)}const Jn=t=>e=>r=>Ln((e=>t),(e=>t),(e=>t),e,(e=>t),(e=>t),r);isFinite,Math.abs,Math.acos,Math.asin,Math.atan,Math.ceil,Math.cos,Math.exp,Math.floor,Math.log,Math.round,Math.sign&&Math.sign,Math.sin,Math.sqrt,Math.tan,Math.trunc&&Math.trunc;const En=function(t){return function(e){return function(r){return(0|r)===r?t(r):e}}},Rn=function(t){return function(e){return function(r){var n;n=r<11?"[0-"+(r-1).toString()+"]":11===r?"[0-9a]":"[0-9a-"+String.fromCharCode(86+r)+"]";var o=new RegExp("^[\\+\\-]?"+n+"+$","i");return function(n){if(o.test(n)){var i=parseInt(n,r);return(0|i)===i?t(i):e}return e}}}}(y)(m)(10),In=En(y)(m),An=function(t){var e=null;return function(){return void 0===t||(e=t(),t=void 0),e}},Nn=function(t){return t()},On=(t,e,r)=>({tag:t,_1:e,_2:r}),Fn=On("Nil"),kn=An((t=>Fn)),Cn={foldr:t=>e=>r=>Cn.foldl((e=>r=>t(r)(e)))(e)(Cn.foldl((t=>e=>An((r=>On("Cons",e,t)))))(kn)(r)),foldl:t=>e=>n=>{let o,i=e,u=n,a=!0;for(;a;){const e=i,n=Nn(u);"Nil"!==n.tag?"Cons"!==n.tag?r():(i=t(e)(n._1),u=n._2):(a=!1,o=e)}return o},foldMap:t=>{const e=t.mempty;return r=>Cn.foldl((e=>n=>t.Semigroup0().append(e)(r(n))))(e)}},Mn={unfoldr1:(()=>{const t=e=>n=>An((o=>Nn((()=>{const o=e(n);if("Just"===o._2.tag){const r=o._1,n=t(e)(o._2._1);return An((t=>On("Cons",r,n)))}if("Nothing"===o._2.tag){const t=o._1;return An((e=>On("Cons",t,kn)))}r()})())));return t})()},Pn={unfoldr:(()=>{const t=e=>n=>An((o=>Nn((()=>{const o=e(n);if("Nothing"===o.tag)return kn;if("Just"===o.tag){const r=o._1._1,n=t(e)(o._1._2);return An((t=>On("Cons",r,n)))}r()})())));return t})(),Unfoldable10:()=>Mn},Un=t=>e=>An((n=>(e=>{let n,o=e,i=!0;for(;i;){const e=o;if("Nil"!==e.tag)if("Cons"!==e.tag)r();else{if(t(e._1)){i=!1,n=On("Cons",e._1,Un(t)(e._2));continue}o=Nn(e._2)}else i=!1,n=Fn}return n})(Nn(e)))),Bn=(t,e,r,n)=>({tag:"KickUp",_1:t,_2:e,_3:r,_4:n}),jn=(t,e,r,n,o,i,u,a)=>({tag:t,_1:e,_2:r,_3:n,_4:o,_5:i,_6:u,_7:a}),Wn=(t,e,r,n,o,i,u)=>({tag:t,_1:e,_2:r,_3:n,_4:o,_5:i,_6:u}),qn=jn("Leaf"),Dn=t=>"Leaf"===t.tag?0:"Two"===t.tag?(1+Dn(t._1)|0)+Dn(t._4)|0:"Three"===t.tag?((2+Dn(t._1)|0)+Dn(t._4)|0)+Dn(t._7)|0:void r(),zn=t=>e=>t.unfoldr((t=>{let e,n=t,o=!0;for(;o;){const t=n;if("Nil"!==t.tag){if("Cons"===t.tag){if("Leaf"===t._1.tag){n=t._2;continue}if("Two"===t._1.tag){if("Leaf"===t._1._1.tag){if("Leaf"===t._1._4.tag){o=!1,e=h("Just",J(J(t._1._2,t._1._3),t._2));continue}o=!1,e=h("Just",J(J(t._1._2,t._1._3),A("Cons",t._1._4,t._2)));continue}n=A("Cons",t._1._1,A("Cons",jn("Two",qn,t._1._2,t._1._3,qn),A("Cons",t._1._4,t._2)));continue}if("Three"===t._1.tag){n=A("Cons",t._1._1,A("Cons",jn("Two",qn,t._1._2,t._1._3,qn),A("Cons",t._1._4,A("Cons",jn("Two",qn,t._1._5,t._1._6,qn),A("Cons",t._1._7,t._2)))));continue}}r()}else o=!1,e=m}return e}))(A("Cons",e,N)),Gn=t=>e=>n=>{let o,i=n,u=!0;for(;u;){const n=i;if("Leaf"!==n.tag)if("Two"!==n.tag)if("Three"!==n.tag)r();else{const r=t.compare(e)(n._2);if("EQ"===r){u=!1,o=h("Just",n._3);continue}const a=t.compare(e)(n._5);if("EQ"===a){u=!1,o=h("Just",n._6);continue}if("LT"===r){i=n._1;continue}if("GT"===a){i=n._7;continue}i=n._4}else{const r=t.compare(e)(n._2);if("EQ"===r){u=!1,o=h("Just",n._3);continue}if("LT"===r){i=n._1;continue}i=n._4}else u=!1,o=m}return o},Hn={map:t=>e=>"Leaf"===e.tag?qn:"Two"===e.tag?jn("Two",Hn.map(t)(e._1),e._2,t(e._3),Hn.map(t)(e._4)):"Three"===e.tag?jn("Three",Hn.map(t)(e._1),e._2,t(e._3),Hn.map(t)(e._4),e._5,t(e._6),Hn.map(t)(e._7)):void r()},$n=t=>e=>n=>{let o,i=t,u=e,a=n,s=!0;for(;s;){const t=i,e=u,n=a;if("Nil"!==e.tag){if("Cons"===e.tag){if("TwoLeft"===e._1.tag){i=t,u=e._2,a=jn("Two",n,e._1._1,e._1._2,e._1._3);continue}if("TwoRight"===e._1.tag){i=t,u=e._2,a=jn("Two",e._1._1,e._1._2,e._1._3,n);continue}if("ThreeLeft"===e._1.tag){i=t,u=e._2,a=jn("Three",n,e._1._1,e._1._2,e._1._3,e._1._4,e._1._5,e._1._6);continue}if("ThreeMiddle"===e._1.tag){i=t,u=e._2,a=jn("Three",e._1._1,e._1._2,e._1._3,n,e._1._4,e._1._5,e._1._6);continue}if("ThreeRight"===e._1.tag){i=t,u=e._2,a=jn("Three",e._1._1,e._1._2,e._1._3,e._1._4,e._1._5,e._1._6,n);continue}}r()}else s=!1,o=n}return o},Vn=t=>e=>n=>{const o=e=>n=>{let o,i=e,u=n,a=!0;for(;a;){const e=i,n=u;if("Nil"!==e.tag){if("Cons"===e.tag){if("TwoLeft"===e._1.tag){a=!1,o=$n(t)(e._2)(jn("Three",n._1,n._2,n._3,n._4,e._1._1,e._1._2,e._1._3));continue}if("TwoRight"===e._1.tag){a=!1,o=$n(t)(e._2)(jn("Three",e._1._1,e._1._2,e._1._3,n._1,n._2,n._3,n._4));continue}if("ThreeLeft"===e._1.tag){i=e._2,u=Bn(jn("Two",n._1,n._2,n._3,n._4),e._1._1,e._1._2,jn("Two",e._1._3,e._1._4,e._1._5,e._1._6));continue}if("ThreeMiddle"===e._1.tag){i=e._2,u=Bn(jn("Two",e._1._1,e._1._2,e._1._3,n._1),n._2,n._3,jn("Two",n._4,e._1._4,e._1._5,e._1._6));continue}if("ThreeRight"===e._1.tag){i=e._2,u=Bn(jn("Two",e._1._1,e._1._2,e._1._3,e._1._4),e._1._5,e._1._6,jn("Two",n._1,n._2,n._3,n._4));continue}}r()}else a=!1,o=jn("Two",n._1,n._2,n._3,n._4)}return o};return i=N,u=>{let a,s=i,f=u,c=!0;for(;c;){const i=s,u=f;if("Leaf"!==u.tag)if("Two"!==u.tag)if("Three"!==u.tag)r();else{const r=t.compare(e)(u._2);if("EQ"===r){c=!1,a=$n(t)(i)(jn("Three",u._1,e,n,u._4,u._5,u._6,u._7));continue}const o=t.compare(e)(u._5);if("EQ"===o){c=!1,a=$n(t)(i)(jn("Three",u._1,u._2,u._3,u._4,e,n,u._7));continue}if("LT"===r){s=A("Cons",Wn("ThreeLeft",u._2,u._3,u._4,u._5,u._6,u._7),i),f=u._1;continue}if("GT"===r&&"LT"===o){s=A("Cons",Wn("ThreeMiddle",u._1,u._2,u._3,u._5,u._6,u._7),i),f=u._4;continue}s=A("Cons",Wn("ThreeRight",u._1,u._2,u._3,u._4,u._5,u._6),i),f=u._7}else{const r=t.compare(e)(u._2);if("EQ"===r){c=!1,a=$n(t)(i)(jn("Two",u._1,e,n,u._4));continue}if("LT"===r){s=A("Cons",Wn("TwoLeft",u._2,u._3,u._4),i),f=u._1;continue}s=A("Cons",Wn("TwoRight",u._1,u._2,u._3),i),f=u._4}else c=!1,a=o(i)(Bn(qn,e,n,qn))}return a};var i},Zn={foldr:t=>e=>n=>"Leaf"===n.tag?e:"Two"===n.tag?Zn.foldr(t)(t(n._3)(Zn.foldr(t)(e)(n._4)))(n._1):"Three"===n.tag?Zn.foldr(t)(t(n._3)(Zn.foldr(t)(t(n._6)(Zn.foldr(t)(e)(n._7)))(n._4)))(n._1):void r(),foldl:t=>e=>n=>"Leaf"===n.tag?e:"Two"===n.tag?Zn.foldl(t)(t(Zn.foldl(t)(e)(n._1))(n._3))(n._4):"Three"===n.tag?Zn.foldl(t)(t(Zn.foldl(t)(t(Zn.foldl(t)(e)(n._1))(n._3))(n._4))(n._6))(n._7):void r(),foldMap:t=>{const e=t.mempty,n=t.Semigroup0();return o=>i=>"Leaf"===i.tag?e:"Two"===i.tag?n.append(Zn.foldMap(t)(o)(i._1))(n.append(o(i._3))(Zn.foldMap(t)(o)(i._4))):"Three"===i.tag?n.append(Zn.foldMap(t)(o)(i._1))(n.append(o(i._3))(n.append(Zn.foldMap(t)(o)(i._4))(n.append(o(i._6))(Zn.foldMap(t)(o)(i._7))))):void r()}},Kn={foldrWithIndex:t=>e=>n=>"Leaf"===n.tag?e:"Two"===n.tag?Kn.foldrWithIndex(t)(t(n._2)(n._3)(Kn.foldrWithIndex(t)(e)(n._4)))(n._1):"Three"===n.tag?Kn.foldrWithIndex(t)(t(n._2)(n._3)(Kn.foldrWithIndex(t)(t(n._5)(n._6)(Kn.foldrWithIndex(t)(e)(n._7)))(n._4)))(n._1):void r(),foldlWithIndex:t=>e=>n=>"Leaf"===n.tag?e:"Two"===n.tag?Kn.foldlWithIndex(t)(t(n._2)(Kn.foldlWithIndex(t)(e)(n._1))(n._3))(n._4):"Three"===n.tag?Kn.foldlWithIndex(t)(t(n._5)(Kn.foldlWithIndex(t)(t(n._2)(Kn.foldlWithIndex(t)(e)(n._1))(n._3))(n._4))(n._6))(n._7):void r(),foldMapWithIndex:t=>{const e=t.mempty,n=t.Semigroup0();return o=>i=>"Leaf"===i.tag?e:"Two"===i.tag?n.append(Kn.foldMapWithIndex(t)(o)(i._1))(n.append(o(i._2)(i._3))(Kn.foldMapWithIndex(t)(o)(i._4))):"Three"===i.tag?n.append(Kn.foldMapWithIndex(t)(o)(i._1))(n.append(o(i._2)(i._3))(n.append(Kn.foldMapWithIndex(t)(o)(i._4))(n.append(o(i._5)(i._6))(Kn.foldMapWithIndex(t)(o)(i._7))))):void r()},Foldable0:()=>Zn},Qn=t=>e=>{const r=ft((r=>n=>t.eq(r._1)(n._1)&&e.eq(r._2)(n._2)));return{eq:t=>e=>r(zn(_n)(t))(zn(_n)(e))}},Yn=t=>e=>e.foldl((e=>r=>Vn(t)(r._1)(r._2)(e)))(qn),Xn=t=>e=>n=>{const o=(t=>e=>{const n=e=>n=>{let o,i=e,u=n,a=!0;for(;a;){const e=i,n=u;if("Nil"!==e.tag)if("Cons"!==e.tag)r();else{const r=e._2,s=(e,n,o,i,u,a,s,f,c,l)=>$n(t)(r)(jn("Two",jn("Two",e,u,f,n),a,c,jn("Two",o,s,l,i))),f=(e,n,o,i,u,a,s,f,c,l)=>$n(t)(r)(jn("Two",jn("Two",e,u,f,n),a,c,jn("Two",o,s,l,i))),c=(e,n,o,i,u,a,s,f,c,l)=>$n(t)(r)(jn("Two",jn("Three",e,u,f,n,a,c,o),s,l,i)),l=(e,n,o,i,u,a,s,f,c,l)=>$n(t)(r)(jn("Two",jn("Three",e,u,f,n,a,c,o),s,l,i)),_=(e,n,o,i,u,a,s,f,c,l)=>$n(t)(r)(jn("Two",e,u,f,jn("Three",n,a,c,o,s,l,i))),g=(e,n,o,i,u,a,s,f,c,l)=>$n(t)(r)(jn("Two",e,u,f,jn("Three",n,a,c,o,s,l,i))),p=(e,n,o,i,u,a,s,f,c,l,_,g,p)=>$n(t)(r)(jn("Three",jn("Two",e,a,l,n),s,_,jn("Two",o,f,g,i),c,p,u)),d=(e,n,o,i,u,a,s,f,c,l,_,g,p)=>$n(t)(r)(jn("Three",jn("Two",e,a,l,n),s,_,jn("Two",o,f,g,i),c,p,u)),h=(e,n,o,i,u,a,s,f,c,l,_,g,p)=>$n(t)(r)(jn("Three",e,a,l,jn("Two",n,s,_,o),f,g,jn("Two",i,c,p,u))),m=(e,n,o,i,u,a,s,f,c,l,_,g,p)=>$n(t)(r)(jn("Three",e,a,l,jn("Two",n,s,_,o),f,g,jn("Two",i,c,p,u)));if("Leaf"===n.tag){if("TwoLeft"===e._1.tag){if("Leaf"===e._1._3.tag){a=!1,o=$n(t)(r)(jn("Two",qn,e._1._1,e._1._2,qn));continue}if("Two"===e._1._3.tag){i=r,u=jn("Three",n,e._1._1,e._1._2,e._1._3._1,e._1._3._2,e._1._3._3,e._1._3._4);continue}if("Three"===e._1._3.tag){a=!1,o=s(n,e._1._3._1,e._1._3._4,e._1._3._7,e._1._1,e._1._3._2,e._1._3._5,e._1._2,e._1._3._3,e._1._3._6);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("TwoRight"===e._1.tag){if("Leaf"===e._1._1.tag){a=!1,o=$n(t)(r)(jn("Two",qn,e._1._2,e._1._3,qn));continue}if("Two"===e._1._1.tag){i=r,u=jn("Three",e._1._1._1,e._1._1._2,e._1._1._3,e._1._1._4,e._1._2,e._1._3,n);continue}if("Three"===e._1._1.tag){a=!1,o=f(e._1._1._1,e._1._1._4,e._1._1._7,n,e._1._1._2,e._1._1._5,e._1._2,e._1._1._3,e._1._1._6,e._1._3);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("ThreeLeft"===e._1.tag){if("Leaf"===e._1._6.tag&&"Leaf"===e._1._3.tag){a=!1,o=$n(t)(r)(jn("Three",qn,e._1._1,e._1._2,qn,e._1._4,e._1._5,qn));continue}if("Two"===e._1._3.tag){a=!1,o=c(n,e._1._3._1,e._1._3._4,e._1._6,e._1._1,e._1._3._2,e._1._4,e._1._2,e._1._3._3,e._1._5);continue}if("Three"===e._1._3.tag){a=!1,o=p(n,e._1._3._1,e._1._3._4,e._1._3._7,e._1._6,e._1._1,e._1._3._2,e._1._3._5,e._1._4,e._1._2,e._1._3._3,e._1._3._6,e._1._5);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("ThreeMiddle"===e._1.tag){if("Leaf"===e._1._1.tag){if("Leaf"===e._1._6.tag){a=!1,o=$n(t)(r)(jn("Three",qn,e._1._2,e._1._3,qn,e._1._4,e._1._5,qn));continue}if("Two"===e._1._6.tag){a=!1,o=_(e._1._1,n,e._1._6._1,e._1._6._4,e._1._2,e._1._4,e._1._6._2,e._1._3,e._1._5,e._1._6._3);continue}if("Three"===e._1._6.tag){a=!1,o=h(e._1._1,n,e._1._6._1,e._1._6._4,e._1._6._7,e._1._2,e._1._4,e._1._6._2,e._1._6._5,e._1._3,e._1._5,e._1._6._3,e._1._6._6);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("Two"===e._1._1.tag){a=!1,o=l(e._1._1._1,e._1._1._4,n,e._1._6,e._1._1._2,e._1._2,e._1._4,e._1._1._3,e._1._3,e._1._5);continue}if("Two"===e._1._6.tag){a=!1,o=_(e._1._1,n,e._1._6._1,e._1._6._4,e._1._2,e._1._4,e._1._6._2,e._1._3,e._1._5,e._1._6._3);continue}if("Three"===e._1._1.tag){a=!1,o=d(e._1._1._1,e._1._1._4,e._1._1._7,n,e._1._6,e._1._1._2,e._1._1._5,e._1._2,e._1._4,e._1._1._3,e._1._1._6,e._1._3,e._1._5);continue}if("Three"===e._1._6.tag){a=!1,o=h(e._1._1,n,e._1._6._1,e._1._6._4,e._1._6._7,e._1._2,e._1._4,e._1._6._2,e._1._6._5,e._1._3,e._1._5,e._1._6._3,e._1._6._6);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("ThreeRight"===e._1.tag){if("Leaf"===e._1._1.tag&&"Leaf"===e._1._4.tag){a=!1,o=$n(t)(r)(jn("Three",qn,e._1._2,e._1._3,qn,e._1._5,e._1._6,qn));continue}if("Two"===e._1._4.tag){a=!1,o=g(e._1._1,e._1._4._1,e._1._4._4,n,e._1._2,e._1._4._2,e._1._5,e._1._3,e._1._4._3,e._1._6);continue}if("Three"===e._1._4.tag){a=!1,o=m(e._1._1,e._1._4._1,e._1._4._4,e._1._4._7,n,e._1._2,e._1._4._2,e._1._4._5,e._1._5,e._1._3,e._1._4._3,e._1._4._6,e._1._6);continue}}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("TwoLeft"===e._1.tag){if("Two"===e._1._3.tag){i=r,u=jn("Three",n,e._1._1,e._1._2,e._1._3._1,e._1._3._2,e._1._3._3,e._1._3._4);continue}if("Three"===e._1._3.tag){a=!1,o=s(n,e._1._3._1,e._1._3._4,e._1._3._7,e._1._1,e._1._3._2,e._1._3._5,e._1._2,e._1._3._3,e._1._3._6);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("TwoRight"===e._1.tag){if("Two"===e._1._1.tag){i=r,u=jn("Three",e._1._1._1,e._1._1._2,e._1._1._3,e._1._1._4,e._1._2,e._1._3,n);continue}if("Three"===e._1._1.tag){a=!1,o=f(e._1._1._1,e._1._1._4,e._1._1._7,n,e._1._1._2,e._1._1._5,e._1._2,e._1._1._3,e._1._1._6,e._1._3);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("ThreeLeft"===e._1.tag){if("Two"===e._1._3.tag){a=!1,o=c(n,e._1._3._1,e._1._3._4,e._1._6,e._1._1,e._1._3._2,e._1._4,e._1._2,e._1._3._3,e._1._5);continue}if("Three"===e._1._3.tag){a=!1,o=p(n,e._1._3._1,e._1._3._4,e._1._3._7,e._1._6,e._1._1,e._1._3._2,e._1._3._5,e._1._4,e._1._2,e._1._3._3,e._1._3._6,e._1._5);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("ThreeMiddle"===e._1.tag){if("Two"===e._1._1.tag){a=!1,o=l(e._1._1._1,e._1._1._4,n,e._1._6,e._1._1._2,e._1._2,e._1._4,e._1._1._3,e._1._3,e._1._5);continue}if("Two"===e._1._6.tag){a=!1,o=_(e._1._1,n,e._1._6._1,e._1._6._4,e._1._2,e._1._4,e._1._6._2,e._1._3,e._1._5,e._1._6._3);continue}if("Three"===e._1._1.tag){a=!1,o=d(e._1._1._1,e._1._1._4,e._1._1._7,n,e._1._6,e._1._1._2,e._1._1._5,e._1._2,e._1._4,e._1._1._3,e._1._1._6,e._1._3,e._1._5);continue}if("Three"===e._1._6.tag){a=!1,o=h(e._1._1,n,e._1._6._1,e._1._6._4,e._1._6._7,e._1._2,e._1._4,e._1._6._2,e._1._6._5,e._1._3,e._1._5,e._1._6._3,e._1._6._6);continue}a=!1,o=ht("The impossible happened in partial function `up`.");continue}if("ThreeRight"===e._1.tag){if("Two"===e._1._4.tag){a=!1,o=g(e._1._1,e._1._4._1,e._1._4._4,n,e._1._2,e._1._4._2,e._1._5,e._1._3,e._1._4._3,e._1._6);continue}if("Three"===e._1._4.tag){a=!1,o=m(e._1._1,e._1._4._1,e._1._4._4,e._1._4._7,n,e._1._2,e._1._4._2,e._1._4._5,e._1._5,e._1._3,e._1._4._3,e._1._4._6,e._1._6);continue}}a=!1,o=ht("The impossible happened in partial function `up`.")}else a=!1,o=n}return o},o=t=>e=>{let r,o=t,i=e,u=!0;for(;u;){const t=o,e=i;if("Two"!==e.tag)if("Three"!==e.tag)u=!1,r=ht("The impossible happened in partial function `removeMaxNode`.");else{if("Leaf"===e._1.tag&&"Leaf"===e._4.tag&&"Leaf"===e._7.tag){u=!1,r=n(A("Cons",Wn("TwoRight",qn,e._2,e._3),t))(qn);continue}o=A("Cons",Wn("ThreeRight",e._1,e._2,e._3,e._4,e._5,e._6),t),i=e._7}else{if("Leaf"===e._1.tag&&"Leaf"===e._4.tag){u=!1,r=n(t)(qn);continue}o=A("Cons",Wn("TwoRight",e._1,e._2,e._3),t),i=e._4}}return r},i=t=>{let e,r=t,n=!0;for(;n;){const t=r;if("Two"!==t.tag)if("Three"!==t.tag)n=!1,e=ht("The impossible happened in partial function `maxNode`.");else{if("Leaf"===t._7.tag){n=!1,e={key:t._5,value:t._6};continue}r=t._7}else{if("Leaf"===t._4.tag){n=!1,e={key:t._2,value:t._3};continue}r=t._4}}return e};return u=N,a=>{let s,f=u,c=a,l=!0;for(;l;){const u=f,a=c;if("Leaf"!==a.tag)if("Two"!==a.tag)if("Three"!==a.tag)r();else{const r=t.compare(e)(a._5),n=t.compare(e)(a._2);if("Leaf"===a._1.tag&&"Leaf"===a._4.tag&&"Leaf"===a._7.tag){if("EQ"===n){l=!1,s=h("Just",J(a._3,$n(t)(u)(jn("Two",qn,a._5,a._6,qn))));continue}if("EQ"===r){l=!1,s=h("Just",J(a._6,$n(t)(u)(jn("Two",qn,a._2,a._3,qn))));continue}if("LT"===n){f=A("Cons",Wn("ThreeLeft",a._2,a._3,a._4,a._5,a._6,a._7),u),c=a._1;continue}if("GT"===n&&"LT"===r){f=A("Cons",Wn("ThreeMiddle",a._1,a._2,a._3,a._5,a._6,a._7),u),c=a._4;continue}f=A("Cons",Wn("ThreeRight",a._1,a._2,a._3,a._4,a._5,a._6),u),c=a._7;continue}if("EQ"===n){const t=i(a._1);l=!1,s=h("Just",J(a._3,o(A("Cons",Wn("ThreeLeft",t.key,t.value,a._4,a._5,a._6,a._7),u))(a._1)));continue}if("EQ"===r){const t=i(a._4);l=!1,s=h("Just",J(a._6,o(A("Cons",Wn("ThreeMiddle",a._1,a._2,a._3,t.key,t.value,a._7),u))(a._4)));continue}if("LT"===n){f=A("Cons",Wn("ThreeLeft",a._2,a._3,a._4,a._5,a._6,a._7),u),c=a._1;continue}if("GT"===n&&"LT"===r){f=A("Cons",Wn("ThreeMiddle",a._1,a._2,a._3,a._5,a._6,a._7),u),c=a._4;continue}f=A("Cons",Wn("ThreeRight",a._1,a._2,a._3,a._4,a._5,a._6),u),c=a._7}else{const r=t.compare(e)(a._2);if("EQ"===r){if("Leaf"===a._4.tag){l=!1,s=h("Just",J(a._3,n(u)(qn)));continue}const t=i(a._1);l=!1,s=h("Just",J(a._3,o(A("Cons",Wn("TwoLeft",t.key,t.value,a._4),u))(a._1)));continue}if("LT"===r){f=A("Cons",Wn("TwoLeft",a._2,a._3,a._4),u),c=a._1;continue}f=A("Cons",Wn("TwoRight",a._1,a._2,a._3),u),c=a._4}else l=!1,s=m}return s};var u})(t)(e)(n);return"Nothing"===o.tag?n:"Just"===o.tag?o._1._2:void r()},to=t=>e=>n=>o=>{const i=e(Gn(t)(n)(o));return"Nothing"===i.tag?Xn(t)(n)(o):"Just"===i.tag?Vn(t)(n)(i._1)(o):void r()},eo=t=>e=>n=>o=>Kn.foldlWithIndex((n=>o=>i=>to(t)((()=>{const t=e(i);return e=>h("Just","Nothing"===e.tag?i:"Just"===e.tag?t(e._1):void r())})())(n)(o)))(o)(n),ro=()=>t=>e=>{const r=e.append,n={append:e=>n=>eo(t)(r)(e)(n)};return{mempty:qn,Semigroup0:()=>n}};function no(t){return t.charCodeAt(0)}String.fromCharCode(65535),String.fromCharCode(0),Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY;const oo=function(t){return t.length},io=function(t){return function(e){return e.substring(t)}},uo=function(t){return function(e){if(t>=0&&t<e.length)return e.charAt(t);throw new Error("Data.String.Unsafe.charAt: Invalid index.")}};Array.from;var ao="undefined"!=typeof Symbol&&null!=Symbol&&void 0!==Symbol.iterator&&"function"==typeof String.prototype[Symbol.iterator],so="function"==typeof String.prototype.fromCodePoint;String.prototype.codePointAt;const fo=function(t){return function(e){return ao?function(t){for(var r="",n=t[Symbol.iterator](),o=0;o<e;++o){var i=n.next();if(i.done)return r;r+=i.value}return r}:t(e)}},co=t=>{return t>=0&&t<=65535?(e=t,String.fromCharCode(e)):t<0?"\0":"￿";var e},lo=t=>{return t<=65535?co(t):co(0|(e=t-65536|0,r=1024,Math.floor(e/r)+55296))+co(function(t){return function(e){if(0===e)return 0;var r=Math.abs(e);return(t%r+r)%r}}(t-65536|0)(1024)+56320|0);var e,r},_o=function(t){return so?String.fromCodePoint:t}(lo),go=t=>e=>{if(t<1)return"";const r=(t=>{const e=oo(t);if(0===e)return m;if(1===e)return h("Just",{head:no(uo(0)(t)),tail:""});const r=no(uo(1)(t)),n=no(uo(0)(t));return h("Just",55296<=n&&n<=56319&&56320<=r&&r<=57343?{head:65536+((1024*(n-55296|0)|0)+(r-56320|0)|0)|0,tail:io(2)(t)}:{head:n,tail:io(1)(t)})})(e);return"Just"===r.tag?_o(r._1.head)+go(t-1|0)(r._1.tail):e},po=fo(go),ho=t=>e=>pn(e,t),mo={gEncodeJson:t=>t=>gn},yo={encodeJson:t=>t},vo={encodeJson:wn},bo={encodeJson:wn},wo={encodeJson:t=>t},To=t=>({encodeJson:(()=>{const e=D(t.encodeJson);return t=>e(t)})()}),So=t=>e=>r=>()=>({gEncodeJson:n=>o=>{const i=r.reflectSymbol(q),u=t.encodeJson(St(r.reflectSymbol(q))(n));return yn((t=>()=>(t[i]=u,t)))(e.gEncodeJson(n)(q))}});var xo=o(736);function Lo(t){return function(e){return function(r){return function(n){try{var o=xo(n,r);return t(o)}catch(t){return e}}}}}function Jo(t){return xo(t)}function Eo(t){return function(e){return e.toString(t)}}function Ro(t){return function(e){return t.add(e)}}const Io=Eo(10),Ao={add:Ro,zero:Jo(0),mul:function(t){return function(e){return t.multiply(e)}},one:Jo(1)},No=Lo(y)(m)(10),Oo=t=>e=>{const r=function(t){return function(e){return t.compare(e)}}(t)(e);return 1===r?p:0===r?d:g};function Fo(t,e,r){return null==t?e:r(t)}const ko={traverseWithIndex:t=>{const e=ko.Traversable2().sequence(t);return t=>{const r=ko.FunctorWithIndex0().mapWithIndex(t);return t=>e(r(t))}},FunctorWithIndex0:()=>nn,FoldableWithIndex1:()=>on,Traversable2:()=>at};function Co(t){return new Error(t)}function Mo(t){return t.message}function Po(t){return function(e){return function(r){return r.stack?t(r.stack):e}}}function Uo(t){return function(){throw t}}const Bo=Po(y)(m),jo=t=>{const e=t.MonadThrow0().Monad0();return r=>t.catchError(e.Bind1().Apply0().Functor0().map(P)(r))((t=>e.Applicative0().pure(C("Left",t))))};var Wo=function(){var t={},e="Pure",r="Throw",n="Catch",o="Sync",i="Async",u="Bind",a="Bracket",s="Fork",f="Sequential",c="Map",l="Apply",_="Alt",g="Cons",p="Resume",d="Release",h="Finalizer",m="Finalized",y="Forked";function v(t,e,r,n){this.tag=t,this._1=e,this._2=r,this._3=n}function b(t){var e=function(e,r,n){return new v(t,e,r,n)};return e.tag=t,e}function w(t){return new v(e,void 0)}function T(t){try{t()}catch(t){setTimeout((function(){throw t}),0)}}function S(t,e,r){try{return e(r())}catch(e){return t(e)}}function x(t,e,r){try{return e(r)()}catch(e){return r(t(e))(),w}}var L=function(){var t=1024,e=0,r=0,n=new Array(t),o=!1;function i(){var i;for(o=!0;0!==e;)e--,i=n[r],n[r]=void 0,r=(r+1)%t,i();o=!1}return{isDraining:function(){return o},enqueue:function(u){var a;e===t&&(a=o,i(),o=a),n[(r+e)%t]=u,e++,o||i()}}}(),J=0,E=1,R=2,I=3,A=4,N=5,O=6;function F(t,c,l){var _=0,y=J,b=l,w=null,k=null,M=null,P=null,U=null,B=0,j=0,W=null,q=!0;function D(l){for(var j,z,G;;)switch(j=null,z=null,G=null,y){case R:y=E;try{b=M(b),null===P?M=null:(M=P._1,P=P._2)}catch(e){y=N,w=t.left(e),b=null}break;case I:t.isLeft(b)?(y=N,w=b,b=null):null===M?y=N:(y=R,b=t.fromRight(b));break;case E:switch(b.tag){case u:M&&(P=new v(g,M,P)),M=b._2,y=E,b=b._1;break;case e:null===M?(y=N,b=t.right(b._1)):(y=R,b=b._1);break;case o:y=I,b=S(t.left,t.right,b._1);break;case i:return y=A,void(b=x(t.left,b._1,(function(t){return function(){_===l&&(_++,L.enqueue((function(){_===l+1&&(y=I,b=t,D(_))})))}})));case r:y=N,w=t.left(b._1),b=null;break;case n:U=new v(g,b,null===M?U:new v(g,new v(p,M,P),U,k),k),M=null,P=null,y=E,b=b._1;break;case a:B++,U=new v(g,b,null===M?U:new v(g,new v(p,M,P),U,k),k),M=null,P=null,y=E,b=b._1;break;case s:y=I,j=F(t,c,b._2),c&&c.register(j),b._1&&j.run(),b=t.right(j);break;case f:y=E,b=C(t,c,b._1)}break;case N:if(M=null,P=null,null===U)y=O,b=k||w||b;else switch(j=U._3,G=U._1,U=U._2,G.tag){case n:k&&k!==j&&0===B?y=N:w&&(y=E,b=G._2(t.fromLeft(w)),w=null);break;case p:k&&k!==j&&0===B||w?y=N:(M=G._1,P=G._2,y=R,b=t.fromRight(b));break;case a:B--,null===w&&(z=t.fromRight(b),U=new v(g,new v(d,G._2,z),U,j),(k===j||B>0)&&(y=E,b=G._3(z)));break;case d:U=new v(g,new v(m,b,w),U,k),y=E,b=k&&k!==j&&0===B?G._1.killed(t.fromLeft(k))(G._2):w?G._1.failed(t.fromLeft(w))(G._2):G._1.completed(t.fromRight(b))(G._2),w=null,B++;break;case h:B++,U=new v(g,new v(m,b,w),U,k),y=E,b=G._1;break;case m:B--,y=N,b=G._1,w=G._2}break;case O:for(var H in W)W.hasOwnProperty(H)&&(q=q&&W[H].rethrow,T(W[H].handler(b)));return W=null,void(k&&w?setTimeout((function(){throw t.fromLeft(w)}),0):t.isLeft(b)&&q&&setTimeout((function(){if(q)throw t.fromLeft(b)}),0));case J:y=E;break;case A:return}}function z(t){return function(){if(y===O)return q=q&&t.rethrow,t.handler(b)(),function(){};var e=j++;return(W=W||{})[e]=t,function(){null!==W&&delete W[e]}}}return{kill:function(e,r){return function(){if(y===O)return r(t.right(void 0))(),function(){};var n=z({rethrow:!1,handler:function(){return r(t.right(void 0))}})();switch(y){case J:k=t.left(e),y=O,b=k,D(_);break;case A:null===k&&(k=t.left(e)),0===B&&(y===A&&(U=new v(g,new v(h,b(e)),U,k)),y=N,b=null,w=null,D(++_));break;default:null===k&&(k=t.left(e)),0===B&&(y=N,b=null,w=null)}return n}},join:function(t){return function(){var e=z({rethrow:!1,handler:t})();return y===J&&D(_),e}},onComplete:z,isSuspended:function(){return y===J},run:function(){y===J&&(L.isDraining()?D(_):L.enqueue((function(){D(_)})))}}}function k(e,r,n,o){var u=0,a={},s=0,f={},p=new Error("[ParAff] Early exit"),d=null,h=t;function m(r,n,o){var i,u,s=n,f=null,p=null,d=0,h={};t:for(;;)switch(i=null,s.tag){case y:if(s._3===t&&(i=a[s._1],h[d++]=i.kill(r,(function(t){return function(){0==--d&&o(t)()}}))),null===f)break t;s=f._2,null===p?f=null:(f=p._1,p=p._2);break;case c:s=s._2;break;case l:case _:f&&(p=new v(g,f,p)),f=s,s=s._1}if(0===d)o(e.right(void 0))();else for(u=0,i=d;u<i;u++)h[u]=h[u]();return h}function b(r,n,i){var u,a,g,h,y,v;for(e.isLeft(r)?(u=r,a=null):(a=r,u=null);;){if(g=null,h=null,y=null,v=null,null!==d)return;if(null===n)return void o(u||a)();if(n._3!==t)return;switch(n.tag){case c:null===u?(n._3=e.right(n._1(e.fromRight(a))),a=n._3):n._3=u;break;case l:if(g=n._1._3,h=n._2._3,u){if(n._3=u,y=!0,v=s++,f[v]=m(p,u===g?n._2:n._1,(function(){return function(){delete f[v],y?y=!1:null===i?b(u,null,null):b(u,i._1,i._2)}})),y)return void(y=!1)}else{if(g===t||h===t)return;a=e.right(e.fromRight(g)(e.fromRight(h))),n._3=a}break;case _:if(g=n._1._3,h=n._2._3,g===t&&e.isLeft(h)||h===t&&e.isLeft(g))return;if(g!==t&&e.isLeft(g)&&h!==t&&e.isLeft(h))u=a===g?h:g,a=null,n._3=u;else if(n._3=a,y=!0,v=s++,f[v]=m(p,a===g?n._2:n._1,(function(){return function(){delete f[v],y?y=!1:null===i?b(a,null,null):b(a,i._1,i._2)}})),y)return void(y=!1)}null===i?n=null:(n=i._1,i=i._2)}}function T(t){return function(e){return function(){delete a[t._1],t._3=e,b(e,t._2._1,t._2._2)}}}return function(){var o,i,s=E,f=n,p=null,d=null;t:for(;;)switch(o=null,i=null,s){case E:switch(f.tag){case c:p&&(d=new v(g,p,d)),p=new v(c,f._1,t,t),f=f._2;break;case l:p&&(d=new v(g,p,d)),p=new v(l,t,f._2,t),f=f._1;break;case _:p&&(d=new v(g,p,d)),p=new v(_,t,f._2,t),f=f._1;break;default:i=u++,s=N,o=f,f=new v(y,i,new v(g,p,d),t),(o=F(e,r,o)).onComplete({rethrow:!1,handler:T(f)})(),a[i]=o,r&&r.register(o)}break;case N:if(null===p)break t;p._1===t?(p._1=f,s=E,f=p._2,p._2=t):(p._2=f,f=p,null===d?p=null:(p=d._1,d=d._2))}for(h=f,i=0;i<u;i++)a[i].run()}(),function(t){return new v(i,(function(r){return function(){return function(t,r){var n;for(var o in d=e.left(t),f)if(f.hasOwnProperty(o))for(o in n=f[o])n.hasOwnProperty(o)&&n[o]();f=null;var u=m(t,h,r);return function(t){return new v(i,(function(t){return function(){for(var t in u)u.hasOwnProperty(t)&&u[t]();return w}}))}}(t,r)}}))}}function C(t,e,r){return new v(i,(function(n){return function(){return k(t,e,r,n)}}))}return v.EMPTY=t,v.Pure=b(e),v.Throw=b(r),v.Catch=b(n),v.Sync=b(o),v.Async=b(i),v.Bind=b(u),v.Bracket=b(a),v.Fork=b(s),v.Seq=b(f),v.ParMap=b(c),v.ParApply=b(l),v.ParAlt=b(_),v.Fiber=F,v.Supervisor=function(t){var e={},r=0,n=0;return{register:function(t){var o=r++;t.onComplete({rethrow:!0,handler:function(t){return function(){n--,delete e[o]}}})(),e[o]=t,n++},isEmpty:function(){return 0===n},killAll:function(i,u){return function(){if(0===n)return u();var a=0,s={};function f(r){s[r]=e[r].kill(i,(function(e){return function(){delete s[r],a--,t.isLeft(e)&&t.fromLeft(e)&&setTimeout((function(){throw t.fromLeft(e)}),0),0===a&&u()}}))()}for(var c in e)e.hasOwnProperty(c)&&(a++,f(c));return e={},r=0,n=0,function(t){return new v(o,(function(){for(var t in s)s.hasOwnProperty(t)&&s[t]()}))}}}}},v.Scheduler=L,v.nonCanceler=w,v}();const qo=Wo.Pure,Do=Wo.Throw;function zo(t){return function(e){return Wo.Catch(t,e)}}function Go(t){return function(e){return e.tag===Wo.Pure.tag?Wo.Pure(t(e._1)):Wo.Bind(e,(function(e){return Wo.Pure(t(e))}))}}function Ho(t){return function(e){return Wo.Bind(t,e)}}const $o=Wo.Sync,Vo=Wo.Async;function Zo(t,e){return function(){return Wo.Fiber(t,null,e)}}Wo.Seq;const Ko={map:Go},Qo={isLeft:t=>"Left"===t.tag||"Right"!==t.tag&&void r(),fromLeft:t=>"Left"===t.tag?t._1:"Right"===t.tag?ht("unsafeFromLeft: Right"):void r(),fromRight:t=>"Right"===t.tag?t._1:"Left"===t.tag?ht("unsafeFromRight: Left"):void r(),left:M,right:P},Yo={Applicative0:()=>ei,Bind1:()=>Xo},Xo={bind:Ho,Apply0:()=>ti},ti={apply:t=>e=>Ho(t)((t=>Ho(e)((e=>ei.pure(t(e)))))),Functor0:()=>Ko},ei={pure:qo,Apply0:()=>ti},ri={liftEffect:$o,Monad0:()=>Yo},ni={throwError:Do,Monad0:()=>Yo},oi={catchError:zo,MonadThrow0:()=>ni},ii=(()=>{const t=qo();return e=>t})(),ui={liftEffect:t=>t,Monad0:()=>Ur},ai=t=>({bind:e=>n=>t.Bind1().bind(e)((e=>"Left"===e.tag?t.Applicative0().pure(C("Left",e._1)):"Right"===e.tag?n(e._1):void r())),Apply0:()=>si(t)}),si=t=>{const e=t.Bind1().Apply0().Functor0(),n={map:t=>e.map((e=>"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",t(e._1)):void r()))};return{apply:(()=>{const e=ai(t);return r=>n=>e.bind(r)((r=>e.bind(n)((e=>fi(t).pure(r(e))))))})(),Functor0:()=>n}},fi=t=>({pure:e=>t.Applicative0().pure(C("Right",e)),Apply0:()=>si(t)}),ci=t=>{const e=t.Monad0(),r={Applicative0:()=>fi(e),Bind1:()=>ai(e)};return{liftEffect:r=>e.Bind1().bind(t.liftEffect(r))((t=>e.Applicative0().pure(C("Right",t)))),Monad0:()=>r}},li=t=>{const e={Applicative0:()=>fi(t),Bind1:()=>ai(t)};return{throwError:e=>t.Applicative0().pure(C("Left",e)),Monad0:()=>e}};function _i(t){return Object.prototype.toString.call(t).slice(8,-1)}function gi(t){return void 0===t}Array.isArray;const pi=(t,e,r)=>({tag:t,_1:e,_2:r}),di=t=>e=>r=>_i(r)===e?fi(t).pure(r):li(t).throwError(L(pi("TypeMismatch",e,_i(r)),N)),hi=(t,e,r)=>({tag:t,_1:e,_2:r}),mi=t=>e=>hi("AtKey",t,e),yi=t=>e=>hi("Named",t,e),vi=hi("MissingValue"),bi={show:t=>"TypeMismatch"===t.tag?"(TypeMismatch "+l(t._1)+")":"UnexpectedValue"===t.tag?"(UnexpectedValue "+Sn(t._1)+")":"AtIndex"===t.tag?"(AtIndex "+c(t._1)+" "+bi.show(t._2)+")":"AtKey"===t.tag?"(AtKey "+l(t._1)+" "+bi.show(t._2)+")":"Named"===t.tag?"(Named "+l(t._1)+" "+bi.show(t._2)+")":"MissingValue"===t.tag?"MissingValue":void r()},wi=(()=>{const t=(t=>{const e=t.Apply0();return r=>n=>bn((t=>n=>o=>e.apply(e.Functor0().map((t=>e=>yn((t=>()=>(t[n]=e,t)))(t)))(t))(r(n)(o))))(t.pure(gn))(n)})(W);return e=>t((t=>e))})(),Ti=(()=>ko.traverseWithIndex(W))(),Si=t=>e=>n=>{const o=mi(n),i=hn(m,y,n,e);if("Nothing"===i.tag)return C("Left",hi("AtKey",n,vi));if("Just"===i.tag){const e=t(i._1);if("Left"===e.tag)return C("Left",o(e._1));if("Right"===e.tag)return C("Right",e._1)}r()},xi=t=>{const e=Ln((t=>C("Left",hi("TypeMismatch","Number"))),(t=>C("Left",hi("TypeMismatch","Number"))),P,(t=>C("Left",hi("TypeMismatch","Number"))),(t=>C("Left",hi("TypeMismatch","Number"))),(t=>C("Left",hi("TypeMismatch","Number"))),t);if("Left"===e.tag)return C("Left",e._1);if("Right"===e.tag){const t=In(e._1);if("Nothing"===t.tag)return C("Left",hi("TypeMismatch","Integer"));if("Just"===t.tag)return C("Right",t._1)}r()},Li=t=>{const e=yi("ForeignObject"),n=wi(t);return t=>{const o=(t=>{const e=Ln((t=>m),(t=>m),(t=>m),(t=>m),(t=>m),y,t);return"Nothing"===e.tag?C("Left",hi("TypeMismatch","Object")):"Just"===e.tag?C("Right",e._1):void r()})(t);if("Left"===o.tag)return C("Left",o._1);if("Right"===o.tag){const t=n(o._1);if("Left"===t.tag)return C("Left",e(t._1));if("Right"===t.tag)return C("Right",t._1)}r()}},Ji=t=>{const e=yi("Array"),n=Ti((e=>{const n=(o=e,t=>hi("AtIndex",o,t));var o;return e=>{const o=t(e);return"Left"===o.tag?C("Left",n(o._1)):"Right"===o.tag?C("Right",o._1):void r()}}));return t=>{const o=(t=>{const e=Ln((t=>m),(t=>m),(t=>m),(t=>m),y,(t=>m),t);return"Nothing"===e.tag?C("Left",hi("TypeMismatch","Array")):"Just"===e.tag?C("Right",e._1):void r()})(t);if("Left"===o.tag)return C("Left",o._1);if("Right"===o.tag){const t=n(o._1);if("Left"===t.tag)return C("Left",e(t._1));if("Right"===t.tag)return C("Right",t._1)}r()}},Ei={gDecodeJson:t=>t=>C("Right",{})},Ri=t=>e=>n=>()=>()=>({gDecodeJson:o=>i=>{const u=n.reflectSymbol(q),a=t.decodeJsonField(hn(m,y,u,o));if("Just"===a.tag){const t=mi(u);if("Left"===a._1.tag)return C("Left",t(a._1._1));if("Right"===a._1.tag){const t=a._1._1,i=e.gDecodeJson(o)(q);return(()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((e=>C("Right",xt(n.reflectSymbol(q))(t)(e))))}r()}if("Nothing"===a.tag)return C("Left",hi("AtKey",u,vi));r()}}),Ii=function(t){return function(e){var r=t.lastIndex,n=t.test(e);return t.lastIndex=r,n}},Ai={global:!1,ignoreCase:!1,multiline:!1,dotAll:!1,sticky:!1,unicode:!1},Ni=t=>e=>{const n=(t=>e=>{return(r=M,function(t){return function(e){return function(n){try{return t(new RegExp(e,n))}catch(t){return r(t.message)}}}})(P)(t)((e.global?"g":"")+(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.dotAll?"s":"")+(e.sticky?"y":"")+(e.unicode?"u":""));var r})(t)(e);return"Left"===n.tag?ht(n._1):"Right"===n.tag?n._1:void r()};var Oi=o(257);const Fi=(()=>{const t=Ni("^[0-9a-f]*$")(Ai),e=Ni("^[0-9a-fA-F]*$")(Ai);return r=>Ii(t)(r)?h("Just",r):Ii(e)(r)?h("Just",r.toLowerCase()):m})();function ki(t,e,r){return r.then(t,e)}function Ci(t){return Promise.resolve(t)}const Mi=t=>{const e=(n=m,(o=t)instanceof Error?y(o):n);var n,o;const i=di(rt)("String")(t),u=(()=>{const t="Left"===i.tag?m:"Right"===i.tag?h("Just",Co(i._1)):void r();return"Nothing"===e.tag?t:e})();return"Nothing"===u.tag?Co("Promise failed, couldn't extract JS Error or String"):"Just"===u.tag?u._1:void r()};o(818);const Pi=t,Ui=function(){return new Promise(((t,e)=>{t(Pi)}))},Bi=Mr(ui),ji=kr(Br),Wi=(()=>{const t={map:t=>e=>r=>{const n=e(r);return()=>{const e=n();return t(e)}}},e={apply:t=>e=>r=>{const n=t(r),o=e(r);return()=>n()(o())},Functor0:()=>t};return{pure:t=>e=>()=>t,Apply0:()=>e}})(),qi=Z(Wr)(F)(V),Di=(()=>{const t=Cr(Ur);return e=>t.Bind1().Apply0().Functor0().map(e)(Pr)})(),zi=So((()=>{const t=So(vo)(So(To(vo))(mo)({reflectSymbol:()=>"op_costs"})())({reflectSymbol:()=>"language"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})()),Gi={reflectSymbol:()=>"PlutusV1"},Hi=(()=>{const t=zi(mo)(Gi)();return e=>t.gEncodeJson(e)(q)})(),$i=zi(mo)({reflectSymbol:()=>"PlutusV2"})(),Vi=(()=>{const t=zi($i)(Gi)();return e=>t.gEncodeJson(e)(q)})(),Zi=Yn(pt)(K),Ki=Cr(Ur),Qi=(()=>{const t=ko.traverseWithIndex(Wi);return e=>r=>t(r)(e)})(),Yi=t=>e=>()=>{const r={value:N},n=()=>qi(r.value)(),o=e({frees:r,lib:t});return(i=t=>()=>(n(),Uo(t)()),function(t){return function(){try{return t()}catch(t){return t instanceof Error||"[object Error]"===Object.prototype.toString.call(t)?i(t)():i(new Error(t.toString()))()}}})((()=>{const t=o();return n(),t}))();var i},Xi=Ho($o(Ui))((t=>{const e=Fo(t,m,y);return"Nothing"===e.tag?qo(m):"Just"===e.tag?zo(Go(y)((n=Mi,t=>Vo((e=>()=>(ki((t=>Ci(e(C("Right",t))())),(t=>Ci(e(C("Left",n(t)))())),t),ii))))(e._1)))((()=>{const t=qo(m);return e=>t})()):void r();var n})),tu=t=>e=>{const r=Kt.is_valid_bech32(t.Address)(e);return()=>r()?h("Just",e):m},eu=Di((t=>t.lib)),ru=t=>e=>{const r=eu(e);return()=>{const e=r();return t(e)}},nu=()=>t=>ji.bind(Di((t=>t.frees)))((e=>ji.bind(Bi.liftEffect(t))((t=>ji.bind(gi(t)?Wi.pure():Bi.liftEffect((()=>{const r=O((()=>vt("free",t)));return()=>{const t=e.value;e.value=r(t)}})()))((()=>Wi.pure(t))))))),ou=()=>t=>ji.bind(Di((t=>t.frees)))((e=>ji.bind(Bi.liftEffect(t))((t=>ji.bind(Bi.liftEffect((()=>{const r=O((()=>vt("free",t)));return()=>{const t=e.value;e.value=r(t)}})()))((()=>Wi.pure(t))))))),iu=(()=>{const t={language:"PlutusV2",op_costs:D(c)([205665,812,1,1,1e3,571,0,1,1e3,24177,4,1,1e3,32,117366,10475,4,23e3,100,23e3,100,23e3,100,23e3,100,23e3,100,23e3,100,100,100,23e3,100,19537,32,175354,32,46417,4,221973,511,0,1,89141,32,497525,14068,4,2,196500,453240,220,0,1,1,1e3,28662,4,2,245e3,216773,62,1,1060367,12586,1,208512,421,1,187e3,1e3,52998,1,80436,32,43249,32,1e3,32,80556,1,57667,4,1e3,10,197145,156,1,197145,156,1,204924,473,1,208896,511,1,52467,32,64832,32,65493,32,22558,32,16563,32,76511,32,196500,453240,220,0,1,1,69522,11687,0,1,60091,32,196500,453240,220,0,1,1,196500,453240,220,0,1,1,1159724,392670,0,2,806990,30482,4,1927926,82523,4,265318,0,4,0,85931,32,205665,812,1,1,41182,32,212342,32,31220,32,32696,32,43357,32,32247,32,38314,32,35892428,10,57996947,18975,10,38887044,32947,10])},e={language:"PlutusV1",op_costs:D(c)([205665,812,1,1,1e3,571,0,1,1e3,24177,4,1,1e3,32,117366,10475,4,23e3,100,23e3,100,23e3,100,23e3,100,23e3,100,23e3,100,100,100,23e3,100,19537,32,175354,32,46417,4,221973,511,0,1,89141,32,497525,14068,4,2,196500,453240,220,0,1,1,1e3,28662,4,2,245e3,216773,62,1,1060367,12586,1,208512,421,1,187e3,1e3,52998,1,80436,32,43249,32,1e3,32,80556,1,57667,4,1e3,10,197145,156,1,197145,156,1,204924,473,1,208896,511,1,52467,32,64832,32,65493,32,22558,32,16563,32,76511,32,196500,453240,220,0,1,1,69522,11687,0,1,60091,32,196500,453240,220,0,1,1,196500,453240,220,0,1,1,806990,30482,4,1927926,82523,4,265318,0,4,0,85931,32,205665,812,1,1,41182,32,212342,32,31220,32,32696,32,43357,32,32247,32,38314,32,57996947,18975,10])};return ji.bind(ru((t=>t.Costmdls)))((r=>ji.bind(ou()(Xt.from_json(r)(Sn(Hi({PlutusV1:t})))))((n=>ji.bind(ou()(Xt.from_json(r)(Sn($i.gEncodeJson({PlutusV2:t})(q)))))((o=>ji.bind(ou()(Xt.from_json(r)(Sn(Vi({PlutusV1:e,PlutusV2:t})))))((t=>Wi.pure({pv1:n,pv2:o,pv1AndPv2:t})))))))))})(),uu=t=>ji.bind(Bi.liftEffect(("utf8",function(){return new TextDecoder("utf8")})))((e=>ji.bind(nu()(nr.multiasset(t)))((e=>ji.bind(ou()(nr.coin(t)))((t=>{return ji.bind((n=t,ji.bind(Bi.liftEffect(yr.to_str(n)))((t=>{const e=No(t);return"Just"===e.tag?Wi.pure(e._1):Bi.liftEffect(Uo(Co("CardanoMultiplatformLib.valueFromCbor: Failed to parse BigInt: "+t)))}))))((t=>{const n=gi(e)?m:h("Just",e),o=(()=>{if("Nothing"===n.tag)return Wi.pure(qn);if("Just"===n.tag){const t=n._1;return ji.bind(ou()(dr.keys(t)))((e=>ji.bind(Bi.liftEffect(Or.len(e)))((n=>{const o=Qi(Dr(n)())((n=>o=>ji.bind(ou()(Or.get(e)(n)))((e=>ji.bind(Bi.liftEffect(Fr.to_hex(e)))((n=>ji.bind(nu()(dr.get(t)(e)))((o=>{const i=gi(o)?m:h("Just",o);return"Nothing"===i.tag?Wi.pure(J(n,qn)):"Just"===i.tag?ji.bind(ou()(br.keys(i._1)))((r=>ji.bind(Bi.liftEffect(wr.len(r)))((o=>{const i=Qi(Dr(o)())((n=>o=>ji.bind(ou()(wr.get(r)(n)))((r=>ji.bind(Bi.liftEffect(Tr.name(r)))((n=>{const o=Oi.c(n);return ji.bind(ou()(dr.get_asset(t)(e)(r)))((t=>ji.bind(Bi.liftEffect(yr.to_str(t)))((t=>{const e=No(t);return"Just"===e.tag?Wi.pure(J(o,e._1)):Bi.liftEffect(Uo(Co("CardanoMultiplatformLib.valueFromCbor: Failed to parse BigInt: "+t)))}))))}))))));return t=>{const e=i(t);return()=>{const t=e();return J(n,Zi(t))}}})))):void r()}))))))));return t=>{const e=o(t);return()=>{const t=e();return Zi(t)}}}))))}r()})();return e=>{const r=o(e);return()=>{const e=r();return eo(pt)(eo(pt)(Ro))(jn("Two",qn,"",jn("Two",qn,"",t,qn),qn))(e)}}}));var n}))))));o(400);const au=t=>Io(t),su={append:function(t){return function(e){return 0===t.length?e:0===e.length?t:t.concat(e)}}},fu={mempty:[],Semigroup0:()=>su},cu=(t,e,r)=>({tag:t,_1:e,_2:r}),lu=(t,e)=>({tag:"NonAdaAssetId",_1:t,_2:e}),_u=(()=>{const t=at.traverse(W);return e=>r=>t(r)(e)})(),gu=vn(K),pu=(()=>K.foldMap(fu)(V))(),du=cu("AdaAssetId"),hu={append:t=>e=>Ro(t)(e)},mu={append:t=>e=>Ro(t)(e)},yu=(()=>({mempty:Ao.zero,Semigroup0:()=>mu}))(),vu={eq:t=>e=>function(t){return function(e){return t.equals(e)}}(t)(e)},bu={eq:t=>e=>"AdaAssetId"===t.tag?"AdaAssetId"===e.tag:"AssetId"===t.tag&&"AssetId"===e.tag&&t._1===e._1&&t._2===e._2},wu=Qn(bu)(vu),Tu={compare:t=>e=>{if("AdaAssetId"===t.tag)return"AdaAssetId"===e.tag?d:g;if("AdaAssetId"===e.tag)return p;if("AssetId"===t.tag&&"AssetId"===e.tag){const r=pt.compare(t._1)(e._1);return"LT"===r?g:"GT"===r?p:pt.compare(t._2)(e._2)}r()},Eq0:()=>bu},Su=(()=>{const t=(t=>{const e=Yn(t)(Cn);return t=>{const r=Un((e=>t(e._1)(e._2)));return t=>e(r(zn(Pn)(t)))}})(Tu);return e=>t((t=>e))})(),xu=Yn(Tu)(K),Lu=ro()(Tu)(hu),Ju=t=>e=>Su((t=>"GT"===Oo(t)(Ao.zero)))(eo(Tu)((t=>e=>{return(r=t,function(t){return r.minus(t)})(e);var r}))(t)(e)),Eu=t=>e=>{const n=Gn(Tu)(e)(t);return"Nothing"===n.tag?Ao.zero:"Just"===n.tag?n._1:void r()},Ru=t=>{const e=Gn(Tu)(du)(t);return 1===Dn(t)&&"Nothing"!==e.tag&&("Just"===e.tag||void r())},Iu=t=>{const e=Fi(t);return"Just"===e.tag?56===oo(e._1)?h("Just",e._1):m:"Nothing"===e.tag?m:void r()},Au=t=>{return(e=pt,t=>n=>t.foldl((t=>o=>{const i=o._2;return to(e)((t=>"Just"===t.tag?h("Just",n(i)(t._1)):"Nothing"===t.tag?h("Just",i):void r()))(o._1)(t)}))(qn))(K)(eo(pt)(Ro))(D((t=>"AdaAssetId"===t._1.tag?J("",jn("Two",qn,"",t._2,qn)):"AssetId"===t._1.tag?J(t._1._1,jn("Two",qn,t._1._2,t._2,qn)):void r()))(zn(_n)(t)));var e},Nu=t=>pn(gu(zn(_n)(Hn.map((t=>gu(zn(_n)(Hn.map(au)(t)))))(Au(t)))),ho(wn)),Ou=t=>{const e=_u(zn(_n)(Hn.map(zn(_n))(t)))((t=>{if(""===t._1)return 1===t._2.length&&""===t._2[0]._1?C("Right",[J(du,t._2[0]._2)]):C("Left",'Only "" is allowed as token name for ADA.');const e=Iu(t._1);if("Nothing"===e.tag)return C("Left","Invalid policy ID: "+t._1);if("Just"===e.tag){const r=e._1;return _u(t._2)((t=>{const e="Invalid asset name - expecting hex: "+t._1,n=Fi(t._1);return"Just"===n.tag?C("Right",J(cu("AssetId",r,n._1),t._2)):C("Left",e)}))}r()}));return"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",xu(pu(e._1))):void r()},Fu=(()=>{const t=So(vo)(So(vo)(So({encodeJson:(e=wn,t=>"Nothing"===t.tag?Tn:"Just"===t.tag?e(t._1):void r())})(mo)({reflectSymbol:()=>"stack"})())({reflectSymbol:()=>"name"})())({reflectSymbol:()=>"msg"})();var e;return e=>t.gEncodeJson(e)(q)})(),ku=t=>{return Fu({name:(e=t,e.name||"Error"),msg:Mo(t),stack:Bo(t)});var e},Cu=(()=>{return(t=k,e=>{const n=e.Bind1(),o=e.Applicative0(),i=n.Apply0().Functor0(),u={map:t=>i.map((e=>"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",t(e._1)):void r()))};return{alt:e=>i=>n.bind(e)((e=>{if("Right"===e.tag)return o.pure(C("Right",e._1));if("Left"===e.tag){const u=e._1;return n.bind(i)((e=>"Right"===e.tag?o.pure(C("Right",e._1)):"Left"===e.tag?o.pure(C("Left",t.append(u)(e._1))):void r()))}r()})),Functor0:()=>u}})(rt).alt;var t})(),Mu=t=>e=>Vo((r=>{const n=(o=e,function(t){return function(e){return function(){o.then(e,t)}}})((e=>r(C("Left",t(e)))()))((t=>r(C("Right",t))()));var o;return()=>(n(),ii)})),Pu=t=>{const e=Cu(di(rt)("Error")(t))((()=>{const e=di(rt)("String")(t);return"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",Co(e._1)):void r()})());return"Left"===e.tag?Co("Promise failed, couldn't extract JS Error or String"):"Right"===e.tag?e._1:void r()};function Uu(t,e){return fetch(t,e)}function Bu(t){return new Headers(t)}const ju=(t=>t)("POST"),Wu=t=>"OPTIONS"===t?"OPTIONS":"GET"===t?"GET":"HEAD"===t?"HEAD":"POST"===t?"POST":"PUT"===t?"PUT":"DELETE"===t?"DELETE":"TRACE"===t?"TRACE":"CONNECT"===t?"CONNECT":"PROPFIND"===t?"PROPFIND":"PROPPATCH"===t?"PROPPATCH":"MKCOL"===t?"MKCOL":"COPY"===t?"COPY":"MOVE"===t?"MOVE":"LOCK"===t?"LOCK":"UNLOCK"===t?"UNLOCK":"PATCH"===t?"PATCH":void r();function qu(t,e){try{return new Request(t,e)}catch(t){throw console.error(t),t}}function Du(t){return t.ok}function zu(t){return t.redirected}function Gu(t){return t.status}function Hu(t){return t.statusText}function $u(t){return t.url}function Vu(t){return function(){return t.body}}const Zu=t=>{const e=(r=t,function(){return r.text()});var r;return Ho($o((()=>e())))(Mu(Pu))},Ku=t=>{const e=(r=t,function(){return r.json()});var r;return Ho($o((()=>e())))(Mu(Pu))},Qu=t=>{const e=(r=t,function(){return r.blob()});var r;return Ho($o((()=>e())))(Mu(Pu))},Yu=t=>{const e=(r=t,function(){return r.arrayBuffer()});var r;return Ho($o((()=>e())))(Mu(Pu))},Xu=t=>{return{headers:(e=t,e.headers),ok:Du(t),redirected:zu(t),status:Gu(t),statusText:Hu(t),url:$u(t),text:Zu(t),json:Ku(t),body:Vu(t),arrayBuffer:Yu(t),blob:Qu(t)};var e},ta=(t,e)=>({tag:t,_1:e}),ea=(()=>{const t=So({encodeJson:ho(wn)})(So(bo)(So(bo)(So(wo)(So(vo)(So(vo)(mo)({reflectSymbol:()=>"url"})())({reflectSymbol:()=>"statusText"})())({reflectSymbol:()=>"status"})())({reflectSymbol:()=>"redirected"})())({reflectSymbol:()=>"ok"})())({reflectSymbol:()=>"headers"})();return e=>t.gEncodeJson(e)(q)})(),ra=vn(K),na=(()=>ai(Yo).bind)(),oa=(()=>fi(Yo).pure)(),ia=(()=>li(Yo).throwError)(),ua=()=>()=>t=>e=>r=>n=>na(zo(Go(P)(Ho($o((()=>{const n=t.convert(r);return()=>qu(e,n)})()))((t=>Ho(Ho($o((()=>Uu(t,{}))))(Mu(Pu)))((t=>qo(Xu(t))))))))((t=>qo(C("Left",{type:"fetchError",value:ta("FetchError",t)})))))((t=>tn(lt)(t.status)(n)?oa(t):ia({type:"fetchError",value:ta("InvalidStatusCode",t)}))),aa=t=>{return"InvalidStatusCode"===t.tag?(o=t._1,ea({headers:ra((e=E,n=o.headers,Array.from(n.entries(),(function(t){return e(t[0])(t[1])})))),ok:o.ok,redirected:o.redirected,status:o.status,statusText:o.statusText,url:o.url})):"FetchError"===t.tag?ku(t._1):void r();var e,n,o},sa=()=>()=>t=>e=>r=>n=>o=>na(zo(Go(P)(Ho($o((()=>{const n=t.convert(r);return()=>qu(e,n)})()))((t=>Ho(Ho($o((()=>Uu(t,{}))))(Mu(Pu)))((t=>qo(Xu(t))))))))((t=>qo(C("Left",o(ta("FetchError",t)))))))((t=>tn(lt)(t.status)(n)?oa(t):ia(o(ta("InvalidStatusCode",t)))));function fa(t,e,r){try{return e(function(t){return t.replace(/[!'()*]/g,(function(t){return"%"+t.charCodeAt(0).toString(16)}))}(encodeURIComponent(r)).replace(/%20/g,"+"))}catch(e){return t(e)}}const ca=(()=>at.traverse(S))(),la=(()=>{const t=b.map((n="&",function(t){return t.join(n)})),e=ca((t=>"Nothing"===t._2.tag?fa((t=>m),y,t._1):"Just"===t._2.tag?w.apply((()=>{const e=fa((t=>m),y,t._1);return"Just"===e.tag?h("Just",(()=>{const t=e._1;return e=>t+"="+e})()):m})())(fa((t=>m),y,t._2._1)):void r()));var n;return r=>t(e(r))})(),_a=(()=>Kn.foldMapWithIndex(fu))(),ga=Yn(pt)(K),pa=t=>({bind:e=>n=>t.Bind1().bind(e)((e=>"Nothing"===e.tag?t.Applicative0().pure(m):"Just"===e.tag?n(e._1):void r())),Apply0:()=>da(t)}),da=t=>{const e=t.Bind1().Apply0().Functor0(),r={map:t=>r=>e.map(b.map(t))(r)};return{apply:(()=>{const e=pa(t);return r=>n=>e.bind(r)((r=>e.bind(n)((e=>ha(t).pure(r(e))))))})(),Functor0:()=>r}},ha=t=>({pure:e=>t.Applicative0().pure(h("Just",e)),Apply0:()=>da(t)}),ma={liftAff:t=>t,MonadEffect0:()=>ri};function ya(t){return t}const va={convertHelper:t=>t=>({})},ba={convertImpl:t=>Wu},wa=t=>()=>()=>()=>e=>r=>()=>()=>({convertHelper:n=>n=>xt(e.reflectSymbol(q))(t.convertImpl(q)(St(e.reflectSymbol(q))(n)))(r.convertHelper(q)(Lt(e.reflectSymbol(q))(n)))});function Ta(t,e,r){try{return e(JSON.parse(r))}catch(e){return t(e.message)}}const Sa={eq:t=>e=>t===e},xa={eq:t=>e=>t.txId===e.txId&&t.txIx===e.txIx},La={compare:t=>e=>pt.compare(t)(e),Eq0:()=>Sa},Ja=(()=>(t=>{const e=t.Eq0();return r=>{const n=r.Eq0(),o={eq:t=>r=>e.eq(t._1)(r._1)&&n.eq(t._2)(r._2)};return{compare:e=>n=>{const o=t.compare(e._1)(n._1);return"LT"===o?g:"GT"===o?p:r.compare(e._2)(n._2)},Eq0:()=>o}}})(La)(dt).compare)(),Ea={compare:t=>e=>Ja(J(t.txId,t.txIx))(J(e.txId,e.txIx)),Eq0:()=>xa},Ra=t=>e=>(t=>e=>t.address===e.address&&("Nothing"===t.datumHash.tag?"Nothing"===e.datumHash.tag:"Just"===t.datumHash.tag&&"Just"===e.datumHash.tag&&t.datumHash._1===e.datumHash._1)&&wu.eq(t.value)(e.value))(t.txOut)(e.txOut)&&t.txOutRef.txId===e.txOutRef.txId&&t.txOutRef.txIx===e.txOutRef.txIx,Ia={encodeJson:t=>t},Aa=t=>{const e=Ln((t=>C("Left",hi("TypeMismatch","String"))),(t=>C("Left",hi("TypeMismatch","String"))),(t=>C("Left",hi("TypeMismatch","String"))),P,(t=>C("Left",hi("TypeMismatch","String"))),(t=>C("Left",hi("TypeMismatch","String"))),t);return"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right",e._1):void r()},Na=(t,e)=>({tag:t,_1:e}),Oa=fi(Yo),Fa=Yn(Tu)(K),ka=(()=>{const t=at.traverse(S);return e=>r=>t(r)(e)})(),Ca=Li(P),Ma=Ri({decodeJsonField:t=>"Just"===t.tag?h("Just",Ln((t=>C("Left",hi("TypeMismatch","String"))),(t=>C("Left",hi("TypeMismatch","String"))),(t=>C("Left",hi("TypeMismatch","String"))),P,(t=>C("Left",hi("TypeMismatch","String"))),(t=>C("Left",hi("TypeMismatch","String"))),t._1)):m}),Pa=(()=>{return e={decodeJson:Ji((t=Ma(Ma(Ei)({reflectSymbol:()=>"unit"})()())({reflectSymbol:()=>"quantity"})()(),()=>({decodeJson:e=>{const n=Ln((t=>m),(t=>m),(t=>m),(t=>m),(t=>m),y,e);return"Just"===n.tag?t.gDecodeJson(n._1)(q):"Nothing"===n.tag?C("Left",hi("TypeMismatch","Object")):void r()}}))().decodeJson)},Si(e.decodeJson);var t,e})(),Ua=(()=>ai(Yo).bind)(),Ba=(()=>sa()()({convert:wa({convertImpl:t=>ya})()()()({reflectSymbol:()=>"body"})(wa({convertImpl:t=>Bu})()()()({reflectSymbol:()=>"headers"})(wa(ba)()()()({reflectSymbol:()=>"method"})(va)()())()())()().convertHelper(q)}))(),ja=t=>t,Wa=(()=>{const t=mn(E);return e=>ga(t(e))})(),qa=(()=>({convert:wa({convertImpl:t=>Bu})()()()({reflectSymbol:()=>"headers"})(va)()().convertHelper(q)}))(),Da=(()=>(t=>{const e=t.MonadEffect0(),r=ci(e);return{liftAff:(()=>{const r=e.Monad0();return e=>r.Bind1().bind(t.liftAff(e))((t=>r.Applicative0().pure(C("Right",t))))})(),MonadEffect0:()=>r}})(ma).liftAff)(),za={decodeJson:Ji(P)},Ga=(()=>{const t=at.traverse(W);return e=>r=>t(r)(e)})(),Ha=(()=>{const t=Ji(Aa);return e=>{const n=t(e);return"Left"===n.tag?C("Left",{type:"jsonDecodeError",value:n._1}):"Right"===n.tag?C("Right",n._1):void r()}})(),$a=t=>e=>n=>{const o=Ca(n);return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((n=>{const o=Si(Jn(C("Left",hi("TypeMismatch","String")))(P))(n)("address");return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((o=>{const i=tu(t)(o)(),u="Nothing"===i.tag?C("Left",hi("TypeMismatch","Invalid Bech32")):"Just"===i.tag?C("Right",i._1):void r();return(()=>{if("Left"===u.tag){const t=u._1;return e=>C("Left",t)}if("Right"===u.tag){const t=u._1;return e=>e(t)}r()})()((t=>{const o=Pa(n)("amount");return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((o=>{const i=(t=>{const e=ka(t)((t=>{const e=(t=>{if("lovelace"===t)return h("Just",du);const e=(t=>{const e=po(56)(t);return{before:e,after:io(oo(e))(t)}})(t),n=Iu(e.before);if("Just"===n.tag){const t=Fi(e.after);return"Just"===t.tag?h("Just",cu("AssetId",n._1,t._1)):m}if("Nothing"===n.tag)return m;r()})(t.unit);if("Just"===e.tag){const r=No(t.quantity);return"Just"===r.tag?h("Just",J(e._1,r._1)):m}if("Nothing"===e.tag)return m;r()}));return"Just"===e.tag?h("Just",Fa(e._1)):m})(o);if("Nothing"===i.tag)return C("Left",hi("TypeMismatch","Invalid amount value"));if("Just"===i.tag){const o=(u=Jn(C("Left",hi("TypeMismatch","String")))(P),t=>e=>{const n=hn(m,y,e,t);if("Nothing"===n.tag)return C("Right",m);if("Just"===n.tag){if(Ln((t=>!0),(t=>!1),(t=>!1),(t=>!1),(t=>!1),(t=>!1),n._1))return C("Right",m);const t=mi(e),r=u(n._1);if("Left"===r.tag)return C("Left",t(r._1));if("Right"===r.tag)return C("Right",h("Just",r._1))}r()})(n)("data_hash");if("Left"===o.tag)return C("Left",o._1);if("Right"===o.tag){const u="Just"===o._1.tag?h("Just",o._1._1):m,a=Si(xi)(n)("output_index");return(()=>{if("Left"===a.tag){const t=a._1;return e=>C("Left",t)}if("Right"===a.tag){const t=a._1;return e=>e(t)}r()})()((o=>{if("Just"===e.tag)return C("Right",{txOutRef:{txId:e._1,txIx:o},txOut:{address:t,value:i._1,datumHash:u}});if("Nothing"===e.tag){const e=Si(Jn(C("Left",hi("TypeMismatch","String")))(P))(n)("tx_hash");if("Left"===e.tag)return C("Left",e._1);if("Right"===e.tag)return C("Right",{txOutRef:{txId:e._1,txIx:o},txOut:{address:t,value:i._1,datumHash:u}})}r()}))}}var u;r()}))}))}))}))},Va=t=>"preprod"===t?"https://cardano-preprod.blockfrost.io/api/v0":"preview"===t?"https://cardano-testnet.blockfrost.io/api/v0":"mainnet"===t?"https://cardano-mainnet.blockfrost.io/api/v0":ht("Blockfrost.apiURL: Unknown network"),Za=[200,201,202,206],Ka=t=>e=>n=>o=>Ua(ua()()(qa)((()=>{const t=la((t=>_a((t=>e=>D((()=>{const e=E(t);return t=>e(h("Just",t))})())(e)))(t))(Wa({page:[c(o)]})));return Va(e)+"/assets/"+n._1+n._2+"/txs?"+(()=>{if("Just"===t.tag)return t._1;r()})()})())({headers:{project_id:t}})(Za))((t=>Ua(Da(Go(Q)(t.json)))((t=>qo(Ha(t)))))),Qa=t=>e=>n=>o=>Ua(ua()()(qa)(Va(n)+"/txs/"+o+"/utxos")({headers:{project_id:e}})(Za))((e=>Ua(Da(Go(Q)(e.json)))((e=>{const n=(n,o)=>{const i=Ca(e),u=(()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((e=>{const i=Si(za.decodeJson)(e)(n);return(()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((e=>Ga(e)($a(t)(o))))}));return"Left"===u.tag?C("Left",{type:"jsonDecodeError",value:u._1}):"Right"===u.tag?C("Right",u._1):void r()},i=n("outputs",h("Just",o));return qo((()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((t=>{const e=n("inputs",m);return(()=>{if("Left"===e.tag){const t=e._1;return e=>C("Left",t)}if("Right"===e.tag){const t=e._1;return e=>e(t)}r()})()((e=>C("Right",{inputs:e,outputs:t})))})))})))),Ya="undefined"==typeof module?void 0:module.require,Xa=function(){try{return void 0===Ya?void 0:Ya("util")}catch(t){return}}();!function(){if("undefined"!=typeof performance)performance;else if(Ya)try{Ya("perf_hooks").performance}catch(t){}}();const ts=()=>t=>{const e=t.Applicative0();return r=>t.Bind1().bind(e.pure())((()=>{return t=r,void 0!==Xa?console.log(Xa.inspect(t,{depth:null,colors:!0})):console.log(t),e.pure();var t}))},es=(()=>({encodeJson:ho(yo.encodeJson)}))(),rs={reflectSymbol:()=>"index"},ns=(()=>{const t=So(vo)(So(Ia)(mo)({reflectSymbol:()=>"transaction_id"})())(rs)();return e=>t.gEncodeJson(e)(q)})(),os=ai(Ur),is=(()=>K.foldMap(Lu))(),us=(()=>{const t=So(yo)(So(yo)(So((()=>{const t=So(bo)(So(To(vo))(mo)({reflectSymbol:()=>"elems"})())({reflectSymbol:()=>"definite_encoding"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})())(So(yo)(So(yo)(So(To((()=>{const t=So(vo)(So((()=>{const t=So(vo)(So(vo)(mo)({reflectSymbol:()=>"steps"})())({reflectSymbol:()=>"mem"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})())(So(vo)(So(vo)(mo)({reflectSymbol:()=>"tag"})())(rs)())({reflectSymbol:()=>"ex_units"})())({reflectSymbol:()=>"data"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})()))(So(yo)(mo)({reflectSymbol:()=>"vkeys"})())({reflectSymbol:()=>"redeemers"})())({reflectSymbol:()=>"plutus_v2_scripts"})())({reflectSymbol:()=>"plutus_v1_scripts"})())({reflectSymbol:()=>"plutus_data"})())({reflectSymbol:()=>"native_scripts"})())({reflectSymbol:()=>"bootstraps"})();return e=>t.gEncodeJson(e)(q)})(),as={reflectSymbol:()=>"fields"},ss={reflectSymbol:()=>"constructor"},fs=(()=>{const t=So(wo)(So(To((()=>{const t=So(vo)(mo)({reflectSymbol:()=>"bytes"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})()))(mo)(as)())(ss)();return e=>t.gEncodeJson(e)(q)})(),cs=To(yo),ls=(()=>{const t=So(wo)(So(cs)(mo)(as)())(ss)();return e=>t.gEncodeJson(e)(q)})(),_s=(()=>ci(ui).liftEffect)(),gs=(()=>li(Ur).throwError)(),ps=(()=>fi(Ur).pure)(),ds=(()=>K.foldMap(Lu))(),hs=(()=>{const t=So(vo)(So((()=>{const t=So(vo)(So(yo)(mo)({reflectSymbol:()=>"multiasset"})())({reflectSymbol:()=>"coin"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})())(So(yo)(So(yo)(mo)({reflectSymbol:()=>"script_ref"})())({reflectSymbol:()=>"datum_option"})())({reflectSymbol:()=>"amount"})())({reflectSymbol:()=>"address"})();return{encodeJson:e=>t.gEncodeJson(e)(q)}})(),ms=(()=>{const t=So(yo)(So((()=>{const t=So(yo)(So(yo)(So((e=yo,{encodeJson:(()=>{const t=D(e.encodeJson);return e=>t(e)})()}))(So(hs)(So(vo)(So(cs)(So(yo)(So(yo)(So(To(hs))(So(cs)(So(To(vo))(So(vo)(So(vo)(So(yo)(So(yo)(So(yo)(So(yo)(mo)({reflectSymbol:()=>"withdrawals"})())({reflectSymbol:()=>"validity_start_interval"})())({reflectSymbol:()=>"update"})())({reflectSymbol:()=>"ttl"})())({reflectSymbol:()=>"total_collateral"})())({reflectSymbol:()=>"script_data_hash"})())({reflectSymbol:()=>"required_signers"})())({reflectSymbol:()=>"reference_inputs"})())({reflectSymbol:()=>"outputs"})())({reflectSymbol:()=>"network_id"})())({reflectSymbol:()=>"mint"})())({reflectSymbol:()=>"inputs"})())({reflectSymbol:()=>"fee"})())({reflectSymbol:()=>"collateral_return"})())({reflectSymbol:()=>"collateral"})())({reflectSymbol:()=>"certs"})())({reflectSymbol:()=>"auxiliary_data_hash"})();var e;return{encodeJson:e=>t.gEncodeJson(e)(q)}})())(So(yo)(So(yo)(mo)({reflectSymbol:()=>"witness_set"})())({reflectSymbol:()=>"is_valid"})())({reflectSymbol:()=>"body"})())({reflectSymbol:()=>"auxiliary_data"})();return e=>t.gEncodeJson(e)(q)})(),ys=ts()({Applicative0:()=>fi(Ur),Bind1:()=>ai(Ur)}),vs=ts()(Ki),bs={decodeJson:Li(P)},ws=t=>e=>n=>{const o=hn(m,y,e,n);if("Just"===o.tag){if(Ln((t=>!0),(t=>!1),(t=>!1),(t=>!1),(t=>!1),(t=>!1),o._1))return C("Right",m);const i=t.decodeJson(o._1);if("Left"===i.tag)return C("Left","Could not decode key "+e+bi.show(i._1)+" in an object: "+Sn(pn(n,yo.encodeJson)));if("Right"===i.tag)return C("Right",h("Just",i._1));r()}if("Nothing"===o.tag)return C("Right",m);r()},Ts=t=>{const e=Ta(M,P,t);return"Left"===e.tag?C("Left",l(e._1)):"Right"===e.tag?C("Right",e._1):void r()},Ss=t=>e=>r=>n=>{const o=t.encodeJson(r);return yn((t=>()=>(t[e]=o,t)))(n)},xs=t=>e=>{const n=t.decodeJson(e);return"Left"===n.tag?C("Left",bi.show(n._1)):"Right"===n.tag?C("Right",n._1):void r()},Ls=void 0,Js=t=>ji.bind(ru((t=>t.TransactionUnspentOutput)))((e=>ji.bind(ou()(ar.input(t)))((e=>ji.bind(ou()(lr.transaction_id(e)))((n=>ji.bind(Bi.liftEffect(_r.to_hex(n)))((n=>ji.bind(ou()(ar.output(t)))((t=>ji.bind(ou()(fr.amount(t)))((o=>ji.bind((()=>{const t=uu(o);return e=>{const r=t(e);return()=>{const t=r();return(()=>{const e=Ou(t);return"Right"===e.tag?e._1:Lu.mempty})()}}})())((o=>ji.bind(nu()(fr.datum(t)))((i=>ji.bind(gi(i)?Wi.pure(m):ji.bind(ou()(hr.as_data_hash(i)))((t=>ji.bind(Bi.liftEffect(mr.to_hex(t)))((t=>Wi.pure(h("Just",t)))))))((i=>ji.bind(ou()(fr.address(t)))((t=>ji.bind(Bi.liftEffect(Zt.to_bech32(t)(Ls)))((t=>ji.bind(ou()(lr.index(e)))((e=>ji.bind(Bi.liftEffect(yr.to_str(e)))((e=>Wi.pure({txOutRef:{txId:n,txIx:(()=>{const t=Rn(e);return"Nothing"===t.tag?0:"Just"===t.tag?t._1:void r()})()},txOut:{address:t,value:o,datumHash:i}}))))))))))))))))))))))))))),Es=t=>ji.bind(ru((t=>t.TransactionUnspentOutput)))((e=>ji.bind(ou()(sr.from_bytes(e)(Oi.J(t))))((t=>Js(t))))),Rs=(()=>fi(rt).pure)(),Is=(()=>ai(rt).bind)(),As=(()=>fi(rt).pure)(),Ns={reflectSymbol:()=>"getBalance"},Os={reflectSymbol:()=>"getChangeAddress"},Fs={reflectSymbol:()=>"getCollateral"},ks={reflectSymbol:()=>"getNetworkId"},Cs={reflectSymbol:()=>"getRewardAddresses"},Ms={reflectSymbol:()=>"getUnusedAddresses"},Ps={reflectSymbol:()=>"getUsedAddresses"},Us={reflectSymbol:()=>"getUtxos"},Bs={reflectSymbol:()=>"signData"},js={reflectSymbol:()=>"signTx"},Ws={reflectSymbol:()=>"submitTx"},qs=t=>e=>Vo((r=>()=>(ki((t=>Ci(r(C("Right",C("Right",t)))())),(e=>Ci(r(C("Right",C("Left",t(e))))())),e),ii))),Ds=t=>e=>{const n=hn(m,y,t,e);return"Nothing"===n.tag?C("Left",L(pi("ForeignError","Missing "+t),N)):"Just"===n.tag?C("Right",n._1):void r()},zs=t=>Is((t=>"Object"===_i(t)?Rs(t):li(rt).throwError(L(pi("TypeMismatch","Object",_i(t)),N)))(t))((t=>Is(Ds("info")(t))((e=>Is(Ds("code")(t))((t=>Is(di(rt)("String")(e))((e=>{return Is((n=rt,t=>{const e=C("Left",L(pi("TypeMismatch","Int",_i(t)),N));return n.Bind1().Apply0().Functor0().map((t=>{if("Left"===t.tag)return e;if("Right"===t.tag){const r=In(t._1);if("Nothing"===r.tag)return e;if("Just"===r.tag)return C("Right",r._1)}r()}))(di(n)("Number")(t))})(t))((t=>As({info:e,code:t})));var n})))))))),Gs=t=>e=>{const r=tu(t)(e),n=Yi(t)(it(Wi)((t=>{return(e=Oi.J(t),t=>ji.bind(Di((t=>t.lib)))((r=>ji.bind(ou()(Kt.from_bytes(r.Address)(e)))((e=>Bi.liftEffect(Zt.to_bech32(e)(t)))))))(Ls);var e}))(Fi(e)));return()=>{const t=r(),e=n();return"Nothing"===t.tag?e:t}},Hs=t=>-1===t.code?h("Just",{type:"invalidRequest",value:t.info}):-2===t.code?h("Just",{type:"internalError",value:t.info}):-3===t.code?h("Just",{type:"refused",value:t.info}):-4===t.code?h("Just",{type:"accountChange",value:t.info}):m,$s=t=>{const e=zs(t);if("Left"===e.tag)return{type:"foreignErrors",value:{value:t,parsingErrors:e._1}};if("Right"===e.tag){const r=Hs(e._1);if("Nothing"===r.tag)return{type:"unknownError",value:t};if("Just"===r.tag)return r._1}r()},Vs=t=>J((()=>{const e=di(rt)("Number")(t);return"Left"===e.tag?m:"Right"===e.tag?h("Just",e._1):void r()})(),(()=>{const e=zs(t);if("Left"===e.tag)return{type:"foreignErrors",value:{value:t,parsingErrors:e._1}};if("Right"===e.tag){const r=Hs(e._1);if("Nothing"===r.tag)return{type:"unknownError",value:t};if("Just"===r.tag)return r._1}r()})()),Zs=t=>{const e=zs(t);if("Left"===e.tag)return{type:"foreignErrors",value:{value:t,parsingErrors:e._1}};if("Right"===e.tag){const o=Hs(e._1),i=1===(n=e._1).code?h("Just",{type:"refused",value:n.info}):2===n.code?h("Just",{type:"failure",value:n.info}):m;if("Nothing"===o.tag){if("Nothing"===i.tag)return{type:"unknownError",value:t};if("Just"===i.tag)return i._1;r()}if("Nothing"===o.tag)return{type:"unknownError",value:t};if("Just"===o.tag)return o._1}var n;r()},Ks=t=>{const e=zs(t);if("Left"===e.tag)return{type:"foreignErrors",value:{value:t,parsingErrors:e._1}};if("Right"===e.tag){const o=Hs(e._1),i=1===(n=e._1).code?h("Just",{type:"proofGeneration",value:n.info}):2===n.code?h("Just",{type:"userDeclined",value:n.info}):m;if("Nothing"===o.tag){if("Nothing"===i.tag)return{type:"unknownError",value:t};if("Just"===i.tag)return i._1;r()}if("Nothing"===o.tag)return{type:"unknownError",value:t};if("Just"===o.tag)return o._1}var n;r()},Qs=(()=>yt(Et(Ns)()({mthFn:t=>t=>u(vt)("getBalance")})()())(yt(Et(Os)()({mthFn:t=>t=>u(vt)("getChangeAddress")})()())(yt(Et(Fs)()({mthFn:t=>t=>a(bt)("getCollateral")})()())(yt(Et(ks)()({mthFn:t=>t=>u(vt)("getNetworkId")})()())(yt(Et(Cs)()({mthFn:t=>t=>u(vt)("getRewardAddresses")})()())(yt(Et(Ms)()({mthFn:t=>t=>u(vt)("getUnusedAddresses")})()())(yt(Et(Ps)()({mthFn:t=>t=>u(vt)("getUsedAddresses")})()())(yt(Et(Us)()({mthFn:t=>t=>u(vt)("getUtxos")})()())(yt(Et(Bs)()({mthFn:t=>t=>s(wt)("signData")})()())(yt(Et(js)()({mthFn:t=>t=>s(wt)("signTx")})()())(yt(Et(Ws)()({mthFn:t=>t=>a(bt)("submitTx")})()())(mt))))))))))).hfoldlWithIndex(Jt)({})(q))(),Ys=(()=>{const t=Go((t=>"Left"===t.tag?C("Left",t._1):"Right"===t.tag?C("Right",Fo(t._1,m,y)):void r()));return e=>t(Ho($o(Qs.getUtxos(e)))(qs(Vs)))})(),Xs=(()=>{const t=at.traverse(ei);return e=>r=>t(r)(e)})(),tf=(()=>{const t=at.traverse(Wi);return e=>r=>t(r)(e)})(),ef=(()=>{const t=ft(Ra);return e=>r=>"Nothing"===e.tag?"Nothing"===r.tag:"Just"===e.tag&&"Just"===r.tag&&t(e._1)(r._1)})(),rf=ts()(Yo),nf=(()=>K.foldMap(yu))(),of=function(t){return function(){console.error(t)}},uf=JSON.stringify,af=(()=>{const t=at.traverse(Wi);return e=>r=>t(r)(e)})(),sf=(()=>{const t=at.traverse(Wr);return e=>r=>t(r)(e)})(),ff=ts()(x),cf=(t,e)=>({tag:t,_1:e}),lf=(t,e)=>({tag:t,_1:e}),_f=(t,e,r)=>({tag:t,_1:e,_2:r}),gf=(t,e)=>({tag:t,_1:e}),pf=(()=>{const t=at.traverse(Wi);return e=>r=>t(r)(e)})(),df={decodeJson:Li(P)},hf=(()=>pa(Yo).bind)(),mf=ai(Yo),yf=t=>e=>Go((e=>"Right"===e.tag?C("Right",e._1):"Left"===e.tag?C("Left",t(e._1)):void r()))(e),vf=(()=>zr(F.foldr))(),bf=(()=>fi(Yo).pure)(),wf=(()=>li(Yo).throwError)(),Tf=(()=>(t=>{const e=li(t);return{catchError:e=>n=>t.Bind1().bind(e)((e=>"Left"===e.tag?n(e._1):"Right"===e.tag?t.Applicative0().pure(C("Right",e._1)):void r())),MonadThrow0:()=>e}})(Yo).catchError)(),Sf=cf("Trigger"),xf=cf("WithdrawalTrigger"),Lf=cf("PayoutUTxOStatusCheckSuccess"),Jf=t=>cf("BuildTxError",t),Ef=t=>cf("BuildTxSuccess",t),Rf=t=>cf("SigningTxSuccess",t),If=t=>cf("SubmittingTxError",t),Af=t=>cf("SubmittingTxSuccess",t),Nf=t=>e=>n=>Go((n=>"Left"===n.tag?t(n._1):"Right"===n.tag?e(n._1):void r()))(n),Of=t=>e=>n=>o=>{return hf((i=Yo,t=>i.Bind1().bind(t)((t=>i.Applicative0().pure("Left"===t.tag?m:"Right"===t.tag?h("Just",t._1):void r()))))(Qa(t)(n)(o)(e.txId)))((t=>{const i=t.outputs;return hf(qo((()=>{const t=(t=>e=>{const n=t.txIx,o=Xr((t=>t.txOutRef.txIx===n))(e);if("Just"===o.tag){const t=e[o._1];if("Just"===t.txOut.datumHash.tag)return C("Right",t.txOut.datumHash._1);if("Nothing"===t.txOut.datumHash.tag)return C("Left",hi("TypeMismatch","DatumHash not found"));r()}return C("Left",hi("TypeMismatch","UTxO not found - invalid index"))})(e)(i);return"Left"===t.tag?m:"Right"===t.tag?h("Just",t._1):void r()})()))((t=>hf((t=>e=>r=>Ho(Go(B)(sa()()(qa)(Va(e)+"/scripts/datum/"+r)({headers:{project_id:t}})(Za)(ja)))((t=>it(ei)((t=>Go(Q)(t.json)))(t))))(n)(o)(t))((t=>qo((()=>{const n=(t=>e=>{const n=t.txIx,o=e.utxos,i=(t=>{const e=df.decodeJson(t);return(()=>{if("Left"===e.tag){const t=e._1;return e=>C("Left",t)}if("Right"===e.tag){const t=e._1;return e=>e(t)}r()})()((t=>{const e=Si(P)(t)("json_value"),n="Left"===e.tag?C("Left",e._1):"Right"===e.tag?df.decodeJson(e._1):void r();return(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const e=Si(Ji(df.decodeJson))(t)("fields");return(()=>{if("Left"===e.tag){const t=e._1;return e=>C("Left",t)}if("Right"===e.tag){const t=e._1;return e=>e(t)}r()})()((t=>{if(2===t.length){const e=t[1],n=Si(Jn(C("Left",hi("TypeMismatch","String")))(P))(t[0])("bytes"),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const e=Iu(t);return"Nothing"===e.tag?C("Left",hi("TypeMismatch","Invalid policyId")):"Just"===e.tag?C("Right",e._1):void r()}));return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((t=>{const n=Si(Jn(C("Left",hi("TypeMismatch","String")))(P))(e)("bytes"),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const e=Fi(t);return"Just"===e.tag?C("Right",e._1):C("Left",hi("TypeMismatch","Invalid assetName"))}));return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((e=>C("Right",{policyId:t,assetName:e})))}))}return C("Left",hi("TypeMismatch","Invalid RoleTokenInfo"))}))}))}))})(e.datumJson);return(()=>{if("Left"===i.tag){const t=i._1;return e=>C("Left",t)}if("Right"===i.tag){const t=i._1;return e=>e(t)}r()})()((t=>{const e=Xr((t=>t.txOutRef.txIx===n))(o);return"Just"===e.tag?C("Right",{roleToken:t,utxo:o[e._1]}):C("Left",hi("TypeMismatch","UTxO not found - invalid index"))}))})(e)({datumJson:t,utxos:i});return"Left"===n.tag?m:"Right"===n.tag?h("Just",n._1):void r()})())))))}));var i},Ff=t=>e=>{if("Initializing"===t.tag)return"Trigger"===e.tag?_f("Initializing",t._1,m):"InitializationError"===e.tag?_f("Initializing",t._1,h("Just",e._1)):"InitializationSuccess"===e.tag?_f("FetchingPayoutUTxO",{...t._1,cml:e._1.cml,payoutReferenceInput:e._1.payoutReferenceInput,walletContext:e._1.walletContext},m):"DriverFailed"===e.tag?_f("DriverFailure",e._1):t;if("FetchingPayoutUTxO"===t.tag)return"FetchPayoutUTxOError"===e.tag?_f("FetchingPayoutUTxO",t._1,h("Just",e._1)):"FetchPayoutUTxOSuccess"===e.tag?_f("FindingRoleTokenUTxO",{...Lt("txOutRef")(t._1),payoutUTxO:e._1},m):"DriverFailed"===e.tag?_f("DriverFailure",e._1):t;if("FindingRoleTokenUTxO"===t.tag)return"FindRoleTokenUTxOError"===e.tag?_f("FindingRoleTokenUTxO",t._1,h("Just",e._1)):"FindRoleTokenUTxOSuccess"===e.tag?_f("PayoutUTxOStatusChecking",{...t._1,roleTokenUTxO:e._1},m):"DriverFailed"===e.tag?_f("DriverFailure",e._1):t;if("PayoutUTxOStatusChecking"===t.tag)return"PayoutUTxOStatusCheckError"===e.tag?_f("PayoutUTxOStatusChecking",t._1,h("Just",e._1)):"PayoutUTxOStatusCheckSuccess"===e.tag?_f("AwaitingWithdrawalTrigger",t._1):"DriverFailed"===e.tag?_f("DriverFailure",e._1):t;if("AwaitingWithdrawalTrigger"===t.tag)return"WithdrawalTrigger"===e.tag?_f("GrabbingCollateralUTxOs",t._1,m):"DriverFailed"===e.tag?_f("DriverFailure",e._1):t;if("GrabbingCollateralUTxOs"===t.tag)return"GrabCollateralUTxOsError"===e.tag?_f("GrabbingCollateralUTxOs",t._1,h("Just",e._1)):"GrabCollateralUTxOsSuccess"===e.tag?_f("BuildingTx",{...t._1,collateralUTxOs:e._1},m):"DriverFailed"===e.tag?_f("DriverFailure",e._1):t;if("BuildingTx"===t.tag)return"BuildTxError"===e.tag?_f("BuildingTx",t._1,h("Just",e._1)):"BuildTxSuccess"===e.tag?_f("SigningTx",{tx:e._1,wallet:t._1.wallet,walletContext:t._1.walletContext,network:t._1.network,payoutReferenceInput:t._1.payoutReferenceInput,cml:t._1.cml,blockfrostProjectId:t._1.blockfrostProjectId},m):"DriverFailed"===e.tag?_f("DriverFailure",e._1):t;if("SigningTx"===t.tag)return"SigningTxError"===e.tag?_f("SigningTx",t._1,h("Just",e._1)):"SigningTxSuccess"===e.tag?_f("SubmittingTx",{...t._1,txWitnessSet:e._1},m):"DriverFailed"===e.tag?_f("DriverFailure",e._1):t;if("SubmittingTx"===t.tag){if("SubmittingTxError"===e.tag)return _f("SubmittingTx",t._1,h("Just",e._1));if("SubmittingTxSuccess"===e.tag)return _f("TxCreated",e._1)}return"DriverFailed"===e.tag?_f("DriverFailure",e._1):t},kf=t=>{if("Initializing"===t.tag){if("Nothing"===t._2.tag){const e=t._1;return h("Just",Ho(Xi)((t=>{if("Just"===t.tag){const o=t._1;return Ho((n=o,t=>Ho((t=>e=>{return Ho((n=e,Ho($o(Qs.getBalance(n)))(qs($s))))((e=>{return"Right"===e.tag?$o(Yi(t)((n=Oi.J(e._1),ji.bind(Di((t=>t.lib)))((t=>ji.bind(ou()(or.from_bytes(t.Value)(n)))((t=>uu(t)))))))):"Left"===e.tag?qo(qn):void r();var n}));var n})(n)(t))((e=>Ho((t=>e=>{return Ho((n=e,Ho($o(Qs.getUsedAddresses(n)))(qs($s))))((n=>Ho(Ys(e))((e=>{const o="Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right","Nothing"===e._1.tag?[]:"Just"===e._1.tag?e._1._1:void r()):void r(),i="Right"===o.tag?o._1:[],u="Right"===n.tag?n._1:[];return Ho($o(Yi(t)(ji.bind(ru((t=>t.TransactionUnspentOutput)))((t=>af(i)((e=>ji.bind(ou()(sr.from_bytes(t)(Oi.J(e))))((t=>ji.bind(ou()(ar.output(t)))((t=>ji.bind(ou()(fr.address(t)))((t=>Bi.liftEffect(Zt.to_bech32(t)(Ls)))))))))))))))((e=>Ho($o((()=>{const e=sf(u)((e=>Gs(t)(e)));return()=>{const t=e();return en((t=>t))(t)}})()))((t=>qo(Yr(pt.compare)([...e,...t]))))))}))));var n})(n)(t))((o=>Ho((t=>e=>{return Ho((r=e,Ho($o(Qs.getChangeAddress(r)))(qs($s))))((e=>"Right"===e.tag?$o(Gs(t)(e._1)):qo(m)));var r})(n)(t))((t=>qo((()=>{if("Just"===t.tag){const n=ff(e);if("Just"===n.tag){const n=Ou(e),i=ff("Balance:");if("Just"===i.tag){const e=ff(n);if("Just"===e.tag){if("Left"===n.tag)return m;if("Right"===n.tag)return h("Just",{balance:n._1,changeAddress:t._1,usedAddresses:o});r()}if("Nothing"===e.tag)return m;r()}if("Nothing"===i.tag)return m;r()}if("Nothing"===n.tag)return m;r()}if("Nothing"===t.tag)return m;r()})()))))))))(e.wallet))((t=>{if("Just"===t.tag){const i="mainnet"===(n=e.network)?h("Just",{txId:"074fc62f0eb2571ff816d2d76d3f6824bec0bb9f3c040a61942f3a1a5a92bd7a",txIx:2}):"preprod"===n?h("Just",{txId:"c59678b6892ba0fbeeaaec22d4cbde17026ff614ed47cea02c47752e5853ebc8",txIx:2}):"preview"===n?h("Just",{txId:"07ee392718487daeeb6b972e6813f527530eaf7184a31b001d8072a5ae76915d",txIx:2}):m;if("Just"===i.tag)return qo(cf("InitializationSuccess",{walletContext:t._1,payoutReferenceInput:i._1,cml:o}));if("Nothing"===i.tag)return qo(cf("InitializationError","Failed to initialize payout reference input"));r()}var n;if("Nothing"===t.tag)return qo(cf("InitializationError","Failed to initialize wallet context"));r()}))}var n;if("Nothing"===t.tag)return qo(cf("InitializationError","Failed to import CML"));r()})))}return m}if("FetchingPayoutUTxO"===t.tag)return"Nothing"===t._2.tag?h("Just",Go((t=>"Nothing"===t.tag?cf("FetchPayoutUTxOError","UTxO not found or parsing failed"):"Just"===t.tag?cf("FetchPayoutUTxOSuccess",t._1):void r()))(Of(t._1.cml)(t._1.txOutRef)(t._1.blockfrostProjectId)(t._1.network))):m;if("FindingRoleTokenUTxO"===t.tag)return"Nothing"===t._2.tag?h("Just",(()=>{const e=t._1.payoutUTxO.roleToken;return Ho((n=t._1.cml,t=>e=>{const o=t.assetName,i=t.policyId;return Ho(Ys(e))((t=>{const e="Left"===t.tag?C("Left",t._1):"Right"===t.tag?C("Right","Nothing"===t._1.tag?[]:"Just"===t._1.tag?t._1._1:void r()):void r(),u="Right"===e.tag?e._1:[];return $o(Yi(n)(ji.bind(ru((t=>t.TransactionUnspentOutput)))((t=>{const e=pf(u)((e=>ji.bind(ou()(sr.from_bytes(t)(Oi.J(e))))((t=>ji.bind(ou()(ar.output(t)))((e=>ji.bind(ou()(fr.amount(e)))((e=>ji.bind((()=>{const t=uu(e);return e=>{const r=t(e);return()=>{const t=r();return(()=>{const e=Ou(t);return"Right"===e.tag?e._1:Lu.mempty})()}}})())((e=>{if("GT"===Oo(Eu(e)(cu("AssetId",i,o)))(Ao.zero)){const e=Js(t);return t=>{const r=e(t);return()=>{const t=r();return h("Just",t)}}}return Wi.pure(m)}))))))))));return t=>{const r=e(t);return()=>{const t=r();return Qr(en((t=>t))(t))(0)}}}))))}))})(e)(t._1.wallet))((t=>{return"Nothing"===t.tag?qo(cf("FindRoleTokenUTxOError","Role token not found{ assetName: "+l((n=e).assetName)+", policyId: "+l(n.policyId)+" }")):"Just"===t.tag?qo(cf("FindRoleTokenUTxOSuccess",t._1)):void r();var n}));var n})()):m;if("GrabbingCollateralUTxOs"===t.tag)return"Nothing"===t._2.tag?h("Just",Ho((e=t._1.cml,t=>n=>{const o=Ho(Ys(n))((t=>$o(Yi(e)((()=>{const e=$r((t=>Ru(t.txOut.value))),n=tf((()=>{if("Left"===t.tag)return[];if("Right"===t.tag){if("Nothing"===t._1.tag)return[];if("Just"===t._1.tag)return t._1._1}r()})())((t=>Es(t)));return t=>{const r=n(t);return()=>{const t=r();return e(t)}}})()))));return Ho(Ho(zo(Ho($o(Yi(e)(ji.bind((i=t,ji.bind(Di((t=>t.lib)))((t=>ji.bind(ou()(vr.from_str(t.BigNum)(Io(i))))((t=>Bi.liftEffect(yr.to_bytes(t))))))))((t=>Wi.pure(Oi.c(t)))))))((t=>Ho(Go(B)((t=>{const e=Go((t=>"Left"===t.tag?C("Left",t._1):"Right"===t.tag?C("Right",(()=>{const e=Fo(t._1,m,y);return"Nothing"===e.tag?[]:"Just"===e.tag?e._1:void r()})()):void r())),n=Qs.getCollateral(t);return t=>e(Ho($o(n(t)))(qs($s)))})(n)(t)))((t=>it(ei)((t=>Xs(t)((t=>$o(Yi(e)(Es(t)))))))(t))))))((t=>qo(h("Just",[])))))((t=>ef(t)(h("Just",[]))?Go(y)(o):qo(t))))((e=>{const r=H((e=>r=>"GT"===Oo(r.total)(t)?r:{utxos:[e,...r.utxos],total:Ro(r.total)(Eu(e.txOut.value)(du))}))({utxos:[],total:Ao.zero}),n=Zr((t=>e=>Oo(Eu(t.txOut.value)(du))(Eu(e.txOut.value)(du)))),o=$r((t=>Ru(t.txOut.value))),i="Just"===e.tag?h("Just",r(n(o(e._1))).utxos):m;return Ho(rf((()=>{const t=nf((t=>Eu(t.txOut.value)(du)));return"Just"===i.tag?h("Just",t(i._1)):m})()))((()=>qo(i)))}));var i})((()=>{const t=No("2000000");return"Just"===t.tag?t._1:ht("twoAdaInLovelace")})())(t._1.wallet))((t=>"Just"===t.tag?t._1.length>0?qo(cf("GrabCollateralUTxOsSuccess",t._1)):qo(cf("GrabCollateralUTxOsError","Collateral UTxOs not found")):"Nothing"===t.tag?qo(cf("GrabCollateralUTxOsError","Collateral UTxOs not found")):void r()))):m;var e,n;if("PayoutUTxOStatusChecking"===t.tag)return"Nothing"===t._2.tag?h("Just",Go((t=>"Left"===t.tag?cf("PayoutUTxOStatusCheckError",t._1):"Right"===t.tag?Lf:void r()))((()=>{const e=t._1.blockfrostProjectId,n=t._1.cml,o=t._1.network,i=t._1.payoutUTxO.utxo.txOutRef.txId;return mf.bind(yf((t=>lf("PayoutUTxOStatusCheckingError",uf(t))))(mf.bind(Go((t=>{return"Left"===t.tag?C("Left",t._1):"Right"===t.tag?C("Right",(e=t._1,vf(e).slice().reverse())):void r();var e}))((u=Ka(e)(o)(lu(t._1.payoutUTxO.roleToken.policyId,t._1.payoutUTxO.roleToken.assetName)),t=>e=>{const n=e=>o=>Ua(u(o))((i=>{if(0===i.length)return Oa.pure(e);const u=H((e=>n=>"StopFolding"===n.tag?n:"Continue"===n.tag?t(n._1)(e):void r()))(Na("Continue",e))(i);return"StopFolding"===u.tag?Oa.pure(u._1):"Continue"===u.tag?n(u._1)(o+1|0):void r()}));return n(e)(1)})((t=>e=>Na("Continue",A("Cons",e,t))))(N)))((t=>{return(u=m,t=>e=>$((t=>r=>ai(Yo).bind(t)((t=>e(t)(r)))))(fi(Yo).pure(u))(t))(t)((t=>u=>"Just"===t.tag?bf(h("Just",t._1)):"Nothing"===t.tag?mf.bind(Qa(n)(e)(o)(u))((t=>{return(e=t=>t.txOutRef.txId===i,function(t){for(var r=t.length,n=0;n<r;n++)if(e(t[n]))return!0;return!1})(t.inputs)?bf(h("Just",u)):bf(m);var e})):void r()));var u}))))((t=>"Just"===t.tag?wf(lf("PayoutUTxOAlreadySpent",t._1)):"Nothing"===t.tag?bf():void r()));var u})())):m;if("BuildingTx"===t.tag)return"Nothing"===t._2.tag?h("Just",Nf(Jf)(Ef)((()=>{const e=t._1.payoutUTxO.utxo,n=t._1.cml,o=t._1.collateralUTxOs,i=t._1.roleTokenUTxO,u=t._1.payoutReferenceInput,a=t._1.walletContext.changeAddress,s=lu(t._1.payoutUTxO.roleToken.policyId,t._1.payoutUTxO.roleToken.assetName);return mf.bind((l=$o((f=n,t=>Yi(f)(ji.bind(ru((t=>t.Address)))((e=>ji.bind(ou()(Kt.from_bech32(e)(t)))((t=>ji.bind(nu()(Zt.payment_cred(t)))((t=>{const e=it(Wi)((t=>ji.bind(nu()(Vt.to_keyhash(t)))((t=>it(Wi)((t=>Bi.liftEffect(oe.to_hex(t))))(gi(t)?m:h("Just",t))))))(gi(t)?m:h("Just",t));return t=>{const n=e(t);return()=>{const t=n();return"Just"===t.tag?t._1:"Nothing"===t.tag?m:void r()}}}))))))))(a)),t=>Go((e=>"Nothing"===e.tag?C("Left",t):"Just"===e.tag?C("Right",e._1):void r()))(l))("bech32 to hash conversion failed"))((t=>{return $o((f=n,t=>e=>n=>o=>i=>os.bind((t=>e=>n=>o=>i=>u=>{const a=o.collaterals,s=Kr(Ea)((t=>t.txOutRef))([...a,o.roleToken,o.payout]),f=o.payout.txOutRef,l=Xr((t=>t.txId===f.txId&&t.txIx===f.txIx))(Zr(Ea.compare)(D((t=>t.txOutRef))(s))),_="Nothing"===l.tag?0:"Just"===l.tag?l._1:void r(),g=D((t=>ns({transaction_id:t.txOutRef.txId,index:c(t.txOutRef.txIx)})))(s),p=Jo(5e5);return os.bind((()=>{const t=Ju(is((t=>t.txOut.value))(s))(jn("Two",qn,du,p,qn)),e=Eu(t)(du),n=Ou(Xn(pt)("")(Au(t))),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>C("Right",{coin:Io(e),multiasset:wu.eq(t)(Lu.mempty)?Tn:Nu(t)})));return()=>o})())((o=>{const s=us({vkeys:"Nothing"===u.tag?Tn:"Just"===u.tag?u._1:void r(),native_scripts:Tn,bootstraps:Tn,plutus_v1_scripts:Tn,plutus_data:{elems:D((t=>Sn(fs(t))))([{constructor:0,fields:[{bytes:n._1},{bytes:n._2}]}]),definite_encoding:!0},redeemers:[{tag:"Spend",index:c(_),data:Sn(ls({constructor:0,fields:[]})),ex_units:{mem:"3237238",steps:"809068390"}}],plutus_v2_scripts:Tn});return os.bind(os.bind(_s(Yi(t)(ji.bind((t=>ji.bind(ru((t=>t.TransactionWitnessSet)))((e=>ou()(ur.from_json(e)(Sn(t))))))(s))((t=>{return e=t,ji.bind(iu)((t=>ji.bind(Bi.liftEffect(ir.redeemers(e)))((r=>ji.bind(Bi.liftEffect(ir.plutus_data(e)))((e=>it(Wi)((r=>ji.bind(ru((t=>t.hash_script_data)))((n=>ji.bind(ou()((()=>{const o=t.pv2;return()=>n(r,o,e)})()))((t=>Bi.liftEffect(pr.to_hex(t))))))))(gi(r)?m:h("Just",r))))))));var e})))))((t=>"Nothing"===t.tag?gs("Could not compute script data hash"):"Just"===t.tag?ps(t._1):void r())))((t=>os.bind((()=>{const t=Ju(ds((t=>t.txOut.value))(a))(jn("Two",qn,du,Jo(75e4),qn)),e=Eu(t)(du),n=Ou(Xn(pt)("")(Au(t))),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>C("Right",{coin:Io(e),multiasset:wu.eq(t)(Lu.mempty)?Tn:Nu(t)})));return()=>o})())((r=>{const n=ms({body:{inputs:g,outputs:[{address:e.bech32,amount:o,datum_option:Tn,script_ref:Tn}],fee:Io(p),collateral:D((t=>ns({transaction_id:t.txOutRef.txId,index:c(t.txOutRef.txIx)})))(a),required_signers:[e.pubKeyHash],network_id:Tn,total_collateral:"750000",collateral_return:{address:e.bech32,amount:r,datum_option:Tn,script_ref:Tn},reference_inputs:[ns({transaction_id:i.txId,index:c(i.txIx)})],script_data_hash:t,ttl:Tn,certs:Tn,withdrawals:Tn,update:Tn,auxiliary_data_hash:Tn,validity_start_interval:Tn,mint:Tn},witness_set:s,is_valid:!0,auxiliary_data:Tn});return os.bind(ys("Transaction with updated witness set:"))((()=>os.bind(ys(xn(2)(n)))((()=>ps(n)))))}))))}))})(f)(t)(e)(n)(o)(i))((t=>{const e=Yi(f)(ji.bind(ru((t=>t.Transaction)))((e=>ji.bind(ou()(gr.from_json(e)(Sn(t))))((t=>ji.bind(Bi.liftEffect(cr.to_bytes(t)))((e=>ji.bind(Bi.liftEffect(cr.to_json(t)))((t=>ji.bind(vs("The final transaction:"))((()=>ji.bind(vs(t))((()=>Wi.pure(Oi.c(e)))))))))))))));return()=>{const t=e();return C("Right",t)}})))({bech32:a,pubKeyHash:t})(s)({collaterals:o,roleToken:i,payout:e})(u)(m));var f}));var f,l})())):m;if("SigningTx"===t.tag)return"Nothing"===t._2.tag?h("Just",Nf((t=>cf("SigningTxError",{tag:"SignTxOperationError",_1:t})))(Rf)((n=t._1.wallet,t=>{const e=Qs.signTx(n)(t);return t=>Ho($o(e(t)))(qs(Ks))})(t._1.tx)(!0))):m;if("SubmittingTx"===t.tag){if("Nothing"===t._2.tag){const e=t._1;return h("Just",(()=>{const t=e.blockfrostProjectId;return Nf(If)(Af)(mf.bind(yf((t=>gf("WitnessKeySetupFailed",uf(t))))($o((n=e.cml,t=>e=>{const o=Yi(n)(ji.bind(ru((t=>t.Transaction)))((t=>ji.bind(ou()(gr.from_bytes(t)(Oi.J(e))))((t=>Bi.liftEffect(cr.to_json(t)))))));return os.bind(_s(Yi(n)(ji.bind(ru((t=>t.TransactionWitnessSet)))((e=>ji.bind(ou()(ur.from_bytes(e)(Oi.J(t))))((t=>Bi.liftEffect(ir.to_json(t)))))))))((t=>os.bind(_s(o))((e=>os.bind((()=>{const n=Ts(e),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((e=>{const n=Ts(t);return(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const n=xs(bs)(e);return(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((e=>{const n=xs(bs)(t),o=(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((t=>{const e=ws({decodeJson:Ji(P)})("vkeys")(t);return"Left"===e.tag?C("Left",e._1):"Right"===e.tag?C("Right","Nothing"===e._1.tag?[]:"Just"===e._1.tag?e._1._1:void r()):void r()}));return(()=>{if("Left"===o.tag){const t=o._1;return e=>C("Left",t)}if("Right"===o.tag){const t=o._1;return e=>e(t)}r()})()((t=>{const n=(o=bs,t=>e=>{const n=hn(m,y,t,e);if("Just"===n.tag){const i=o.decodeJson(n._1);if("Left"===i.tag)return C("Left","Could not decode key "+t+bi.show(i._1)+" in an object: "+Sn(pn(e,yo.encodeJson)));if("Right"===i.tag)return C("Right",i._1);r()}if("Nothing"===n.tag)return C("Left","Could not find key "+t+"in an object: "+Sn(pn(e,yo.encodeJson)));r()})("witness_set")(e);var o;return(()=>{if("Left"===n.tag){const t=n._1;return e=>C("Left",t)}if("Right"===n.tag){const t=n._1;return e=>e(t)}r()})()((n=>{const o=ws({decodeJson:Ji(P)})("vkeys")(n);return"Left"===o.tag?C("Left",o._1):"Right"===o.tag?C("Right",pn(Ss(es)("witness_set")(Ss(cs)("vkeys")([..."Nothing"===o._1.tag?[]:"Just"===o._1.tag?o._1._1:void r(),...t])(n))(e),yo.encodeJson)):void r()}))}))}))}))})),i="Left"===o.tag?C("Left","Witness set update failed on Json operations: "+o._1):"Right"===o.tag?C("Right",o._1):void r();return()=>i})())((t=>os.bind(_s(Yi(n)(ji.bind(ru((t=>t.Transaction)))((e=>ji.bind(ou()(gr.from_json(e)(Sn(t))))((t=>ji.bind(vs("Updated transaction:"))((()=>ji.bind(Bi.liftEffect(cr.to_json(t)))((e=>ji.bind(vs(xn(2)((()=>{const t=Ta(M,P,e);return"Left"===t.tag?Tn:"Right"===t.tag?t._1:void r()})())))((()=>Bi.liftEffect(cr.to_bytes(t)))))))))))))))((t=>ps(Oi.c(t))))))))))})(e.txWitnessSet)(e.tx))))((n=>{const o=mf.bind(yf((t=>gf("BlockfrostSubmitTxError",{msg:"Fetching error",info:aa(t)})))((t=>e=>r=>Ho(Ba(Va(e)+"/tx/submit")({headers:{project_id:t,"Content-Type":"application/cbor"},body:Oi.J(r),method:ju})(Za)(ja))((t=>ut(ei)((t=>Go(Q)(t.json)))(t))))(t)(e.network)(n)))((t=>mf.bind(qo((()=>{const e=Aa(t);return"Left"===e.tag?C("Left",gf("BlockfrostSubmitTxError",{msg:"Response parsing failed",info:t})):"Right"===e.tag?C("Right",e._1):void r()})()))((t=>bf(t)))));return Tf(mf.bind(yf((t=>gf("WalletSubmitTxError",{msg:"Wallet error",info:t})))((t=>{const e=Qs.submitTx(t);return t=>Ho($o(e(t)))(qs(Zs))})(e.wallet)(n)))((t=>bf(t))))((t=>mf.bind(ci(ri).liftEffect(of("wallet submission failed:")))((()=>mf.bind(ci(ri).liftEffect(of(uf(t))))((()=>mf.bind(ci(ri).liftEffect(of("trying blockfrost submission...")))((()=>o))))))))})));var n})())}return m}return m},Cf=t=>{const e=kf(t);return"Just"===e.tag?h("Just",zo(e._1)((e=>qo(cf("DriverFailed",{state:t,error:e}))))):m},Mf=(Pf={default:()=>e.default},Uf={},o.d(Uf,Pf),Uf);var Pf,Uf;Mf.default.createElement,Mf.default.Fragment;const Bf=(t,e)=>{const r=Mf.default.useRef(e);return r.current===e||t(r.current,e)||(r.current=e),r.current};function jf(t,e){const[r,n]=Mf.default.useState("function"==typeof e?()=>e:e);return n.hasOwnProperty("$$reactBasicHooks$$cachedSetState")||(n.$$reactBasicHooks$$cachedSetState=t=>()=>n(t)),t(r,n.$$reactBasicHooks$$cachedSetState)}function Wf(t,e,r){const n=Bf(t,e);Mf.default.useEffect(r,[n])}Mf.default.memo,Mf.default.memo;const qf=Mf.default.useRef;function Df(t){return t.current}function zf(t,e){t.current=e}Mf.default.useContext,Mf.default.useDebugValue,Mf.default.useId,Mf.default.useDeferredValue,Mf.default.useSyncExternalStore,Mf.default.useSyncExternalStore;const Gf=u(zf),Hf=n(Df),$f={map:t=>e=>()=>{const r=e();return t(r)}},Vf=t=>{const e={apply:t=>e=>()=>t()(e()),Functor0:()=>$f};return{pure:t=>()=>t,Apply0:()=>e}},Zf=jo(oi),Kf=t=>e=>n=>o=>()=>{const i=jf(((t,e)=>J(t,e)),m),u=i._2(e);if(Wf(((e,r)=>t.eq(e)(r)),n,(()=>{u();const t=Zo(Qo,Ho(Zf(o))((t=>$o(i._2((e=>h("Just",t)))))))();t.run();const e=Zo(Qo,(r=Co("Stale request cancelled"),t=>Ho($o(t.isSuspended))((e=>e?$o((()=>{const e=t.kill(r,(t=>()=>{}));return()=>{e()}})()):Vo((e=>{const n=t.kill(r,e);return()=>{const t=n();return(()=>{const e=$o(t);return t=>e})()}})))))(t));var r;return()=>{e().run()}})),"Just"===i._1.tag){if("Left"===i._1._1.tag)return Uo(i._1._1._1)();if("Right"===i._1._1.tag)return h("Just",i._1._1._1);r()}if("Nothing"===i._1.tag)return m;r()},Qf=(()=>Vf().pure)(),Yf=t=>{const e=(t=>()=>{const e=function(t,e,r){const n=Bf(((t,e)=>!0),void 0);return Mf.default.useMemo((t=>({value:0})),[n])}(),r=jf(((t,e)=>J(t,e)),{version:0,state:t});return Qf(J(r._1,(t=>()=>{const n=e.value,o=e.value=n+1|0;return r._2((e=>({version:o,state:t(e.state)})))()})))()})(t);return()=>{const t=e();return Qf(J(t._1,(e=>t._2((t=>e)))))()}},Xf=t=>e=>r=>()=>{const n=qf(r),o=Gf(n)(r);return Wf(((e,r)=>t.eq(e)(r)),e,(()=>(o(),()=>{}))),Qf(n)()},tc=(()=>Vf().pure)(),ec=(t,e)=>({tag:t,_1:e}),rc=(()=>{const t=So(yo)(So(vo)(So(vo)(mo)({reflectSymbol:()=>"tag"})())({reflectSymbol:()=>"msg"})())({reflectSymbol:()=>"info"})();return e=>t.gEncodeJson(e)(q)})(),nc=t=>t,oc=(()=>Vf().pure)(),ic=function(t){return(t=>{const e=(t=>{const e=Yf(t);return()=>{const n=e(),o=Xf(lt)(n._1.version)(n._1.state)(),i=Yf(t.initialState)(),u=Xf(lt)(i._1.version)(i._1.state)(),a=Yf(m)(),s=Xf(lt)(a._1.version)(a._1.state)(),f=(t,e,r)=>{const n=r.step(e)(t),o=r.driver(n),u=i._2(n);return()=>(u(),a._2(o)())},c=t=>{const e=Hf(u);return()=>{const r=e(),n=Hf(o)();return f(t,r,n)()}};return Kf(lt)((t=>m))(a._1.version)(Ho($o(Hf(s)))((t=>"Nothing"===t.tag?qo():"Just"===t.tag?Ho(t._1)((t=>$o(c(t)))):void r())))(),tc({state:i._1.state,output:n._1.state.output(i._1.state),applyAction:t=>c(t),reset:t=>{const e=Hf(o);return()=>{const o=e(),u="Nothing"===t.tag?o:"Just"===t.tag?t._1:void r();return n._2(u)(),i._2(u.initialState)(),a._2(m)(),t=>f(t,u.initialState,u)}}})()}})({initialState:_f("Initializing",t,m),driver:Cf,output:nc,step:Ff});return()=>{const t=e(),n=t.applyAction(Sf);return Wf(((t,e)=>!0),void 0,(()=>(n(),()=>{}))),oc({status:(o=(i=t.applyAction(xf),t=>{if("Initializing"===t.tag){if("Nothing"===t._2.tag)return ec("Initializing","Setup");if("Just"===t._2.tag)return ec("InitializationFailed",{tag:"InitializeError",msg:t._2._1,info:Tn});r()}if("FetchingPayoutUTxO"===t.tag){if("Nothing"===t._2.tag)return ec("Initializing","FetchingPayoutUTxO");if("Just"===t._2.tag)return ec("InitializationFailed",{tag:"FetchPayoutUTxOError",msg:t._2._1,info:Tn});r()}if("FindingRoleTokenUTxO"===t.tag){if("Nothing"===t._2.tag)return ec("Initializing","FindingRoleTokenUTxO");if("Just"===t._2.tag)return ec("InitializationFailed",{tag:"FindRoleTokenUTxOError",msg:t._2._1,info:Tn});r()}if("PayoutUTxOStatusChecking"===t.tag){if("Nothing"===t._2.tag)return ec("Initializing","PayoutUTxOStatusChecking");if("Just"===t._2.tag)return ec("InitializationFailed","PayoutUTxOStatusCheckingError"===t._2._1.tag?{tag:"PayoutUTxOStatusCheckError",msg:t._2._1._1,info:Tn}:"PayoutUTxOAlreadySpent"===t._2._1.tag?{tag:"PayoutUTxOAlreadySpentError",msg:"Payout UTxO already spent",info:t._2._1._1}:void r());r()}if("AwaitingWithdrawalTrigger"===t.tag)return ec("AwaitingWithdrawalTrigger",i);if("GrabbingCollateralUTxOs"===t.tag){if("Nothing"===t._2.tag)return ec("ProcessingWithdrawal","GrabbingCollateralUTxOs");if("Just"===t._2.tag)return ec("WithdrawalFailed",{error:{tag:"GrabCollateralUTxOsError",msg:t._2._1,info:Tn},retry:i});r()}if("BuildingTx"===t.tag){if("Nothing"===t._2.tag)return ec("ProcessingWithdrawal","BuildingTx");if("Just"===t._2.tag)return ec("WithdrawalFailed",{error:{tag:"BuildTxError",msg:t._2._1,info:Tn},retry:i});r()}if("SigningTx"===t.tag){if("Nothing"===t._2.tag)return ec("ProcessingWithdrawal","SigningTx");if("Just"===t._2.tag)return ec("WithdrawalFailed",{error:"UserAborted"===t._2._1.tag?{tag:"UserAbortedError",msg:"User aborted signing operation",info:Tn}:"SignTxOperationError"===t._2._1.tag?{tag:"SignTxOperationError",msg:"Some error occured while signing the transaction",info:t._2._1._1}:void r(),retry:i});r()}if("SubmittingTx"===t.tag){if("Nothing"===t._2.tag)return ec("ProcessingWithdrawal","SubmittingTx");if("Just"===t._2.tag)return ec("WithdrawalFailed",{retry:i,error:"WalletSubmitTxError"===t._2._1.tag?{tag:"WalletSubmitTxError",msg:t._2._1._1.msg,info:t._2._1._1.info}:"WitnessKeySetupFailed"===t._2._1.tag?{tag:"WitnessKeySetupFailed",msg:t._2._1._1,info:Tn}:"BlockfrostSubmitTxError"===t._2._1.tag?{tag:"BlockfrostSubmitTxError",msg:t._2._1._1.msg,info:t._2._1._1.info}:void r()});r()}return"TxCreated"===t.tag?ec("WithdrawalSucceeded",t._1):"DriverFailure"===t.tag?ec("FatalError",{tag:"FatalError",info:ku(t._1.error),msg:"An unhandled exception during execution with internal state: "+uf(t._1.state)}):void r()})(t.state),"Initializing"===o.tag?{status:"Initializing",step:o._1}:"InitializationFailed"===o.tag?{status:"InitializationFailed",error:rc(o._1)}:"AwaitingWithdrawalTrigger"===o.tag?{status:"AwaitingWithdrawalTrigger",trigger:o._1}:"ProcessingWithdrawal"===o.tag?{status:"ProcessingWithdrawal",msg:o._1}:"WithdrawalFailed"===o.tag?{status:"WithdrawalFailed",error:rc(o._1.error),retry:o._1.retry}:"WithdrawalSucceeded"===o.tag?{status:"WithdrawalSucceeded",txId:o._1}:"FatalError"===o.tag?{status:"FatalError",error:rc(o._1)}:void r()),reset:e=>{const r=t.reset(h("Just",{initialState:_f("Initializing",e,m),driver:Cf,output:nc,step:Ff}));return()=>{r()(Sf)()}}})();var o,i}})(t)()}})();var u=i.J;export{u as useWithdrawal};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,